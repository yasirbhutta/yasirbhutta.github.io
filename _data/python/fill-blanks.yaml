course: python
topics:
  - topic: classes
    questions:
      - id: py-co-001
        difficulty: easy
        prompt: In Python, you create a class using the ________ keyword.
        answer: class
        explanation: "In Python, the `class` keyword is used to define a new class. For example, `class MyClass:` defines a class named `MyClass`."

      - id: py-co-002
        difficulty: easy
        prompt: A class is a ________ for creating objects (instances).
        answer: blueprint
        explanation: ""

      - id: py-co-003
        difficulty: easy
        prompt: Objects are ________ of a class that have attributes (data) and methods (functions).
        answer: instances
        explanation: ""

      - id: py-co-004
        prompt: The `__init__` method is a special method that is automatically called when a new ________ of a class is created.
        answer: object
        explanation: ""

      - id: py-co-005
        prompt: Instance attributes are ________ to each instance (object) of a class.
        answer: unique
        explanation: ""

      - id: py-co-006
        prompt: The `self` parameter is used to access the ________ and ________ of an object within its methods.
        answer: attributes, methods
        explanation: ""

      - id: py-co-007
        prompt: Class attributes are shared across all ________ of the class, while instance attributes are specific to each ________.
        answer: objects, object
        explanation: ""

      - id: py-co-008
        prompt: To access an attribute of an object, use the ________ notation (e.g., `object.attribute`).
        answer: dot
        explanation: ""

      - id: py-co-009
        prompt: Changing the value of a ________ attribute will reflect across all objects of the class.
        answer: class
        explanation: ""

      - id: py-co-010
        prompt: Methods are ________ defined within a class that operate on the object's data.
        answer: functions
        explanation: ""
    examples:
      - id: py-co-ex-001
        code: |
          class Car:
              def describe(self):
                  print(f"{self.year} {self.make} {self.model}")
        prompt: The `describe` method is a ________ of the `Car` class.
        answer: method
        explanation: ""

      - id: py-co-ex-002
        code: |
          class Student:
              def set_grade(self, new_grade):
                  self.grade = new_grade
        prompt: The `set_grade` method is used to ________ the grade of a student.
        answer: update
        explanation: ""
    resources:
    - name: Learn Classes and Objects
      url: https://yasirbhutta.github.io/python/docs/classes.html
  - topic: oop-inheritance
    questions:
      - id: py-inh-002
        prompt: In Python, inheritance allows a new class to reuse code from an existing ________ class.
        answer: parent
        explanation: ""

      - id: py-inh-003
        prompt: A class that inherits from another class is called a ________ class.
        answer: child
        explanation: ""

      - id: py-inh-004
        prompt: To define a child class that inherits from a parent class, you include the parent class name in ________.
        answer: parentheses
        explanation: ""

      - id: py-inh-005
        prompt: The `super()` function is used to call methods from the ________ class.
        answer: parent
        explanation: ""

      - id: py-inh-006
        prompt: In method overriding, a child class provides its own version of a method that exists in the ________ class.
        answer: parent
        explanation: ""

      - id: py-inh-007
        prompt: When a child class does not override a method, it inherits the method from its ________ class.
        answer: parent
        explanation: ""

      - id: py-inh-008
        prompt: In multilevel inheritance, a class inherits from a child class, which in turn inherits from a ________ class.
        answer: parent
        explanation: ""

    examples:
      - id: py-inh-ex-001
        code: |
          class Person:
              def __init__(self, name):
                  self.name = name

              def introduce(self):
                  print(f"Hi, I'm {self.name}")

          class Student(Person):
              def study(self):
                  print(f"{self.name} is studying.")
        prompt: In the above code, the `Student` class ________ from the `Person` class.
        answer: inherits
        explanation: ""

      - id: py-inh-ex-002
        code: |
          class Vehicle:
              def __init__(self, brand):
                  self.brand = brand

              def drive(self):
                  print("The vehicle is moving.")

          class Car(Vehicle):
              def __init__(self, brand, model):
                  super().__init__(brand)
                  self.model = model

              def drive(self):
                  print(f"The {self.brand} {self.model} is driving.")
        prompt: The `Car` class uses the `super()` function to call the constructor of the ________ class.
        answer: Vehicle
        explanation: ""
    resources:
    - name: Learn Inheritance in Python
      url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html


  - topic: strings
    questions:
      - id: py-str-001
        difficulty: easy
        prompt: "In Python, a string is a sequence of characters enclosed in ________."
        answer: quotes
        explanation: "Strings in Python are defined by enclosing characters within single ('') or double ('') quotes."

      - id: py-str-002
        difficulty: easy
        prompt: "The operator used to concatenate two strings in Python is ________."
        answer: +
        explanation: "The '+' operator is used to concatenate (join) two or more strings in Python."

      - id: py-str-003
        difficulty: easy
        prompt: "To repeat a string multiple times in Python, you use the ________ operator."
        answer: *
        explanation: "The '*' operator is used to repeat a string a specified number of times."

      - id: py-str-004
        difficulty: easy
        prompt: "The method to convert all characters of a string to uppercase is ________."
        answer: upper()
        explanation: "The 'upper()' method returns a copy of the string with all characters converted to uppercase."

      - id: py-str-005
        difficulty: easy
        prompt: "To remove leading and trailing spaces from a string, use the ________ method."
        answer: strip()
        explanation: "The 'strip()' method removes any leading and trailing characters (space is the default) from the string."

      - id: py-str-006
        difficulty: easy
        prompt: "The method to check if all characters in a string are digits is ________."
        answer: isdigit()
        explanation: "The 'isdigit()' method returns True if all characters in the string are digits."

      - id: py-str-007
        difficulty: easy
        prompt: "To replace all occurrences of a substring within a string, use the ________ method."
        answer: replace()
        explanation: "The 'replace()' method returns a copy of the string with all occurrences of a substring replaced with another substring."

      - id: py-str-008
        difficulty: easy
        prompt: "The method to split a string into a list where each word is a list item is ________."
        answer: split()
        explanation: "The 'split()' method splits a string into a list where each word is a list item, using space as the default separator."

      - id: py-str-009
        difficulty: easy
        prompt: "To check if a string starts with a specified substring, use the ________ method."
        answer: startswith()
        explanation: "The 'startswith()' method returns True if the string starts with the specified value."

      - id: py-str-010
        difficulty: easy
        prompt: "The method to convert the first character of each word to uppercase is ________."
        answer: title()
        explanation: "The 'title()' method returns a string where the first character of each word is uppercase and the rest are lowercase."
    resources:
    - name: Learn String Methods & Formatting
      url: https://yasirbhutta.github.io/python/docs/strings.html

