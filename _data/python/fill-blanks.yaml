course: python
topics:
  - topic: if elif else  
    questions:  
      - id: if-fib-001  
        difficulty: easy  
        prompt: "The basic structure of an 'if' statement in Python is: ______ condition:"  
        answer: "if"  
        explanation: "The 'if' keyword starts a conditional block, followed by a condition and a colon."  

      - id: if-fib-002  
        difficulty: easy  
        prompt: "To check an alternative condition after an 'if', we use: ______ condition:"  
        answer: "elif"  
        explanation: "'elif' (short for 'else if') is used to check additional conditions after the initial 'if'."  

      - id: if-fib-003  
        difficulty: easy  
        prompt: "The ______ block executes when none of the previous 'if' or 'elif' conditions are true."  
        answer: "else"  
        explanation: "The 'else' block serves as a fallback when no other conditions are met."  

      - id: if-fib-004  
        difficulty: medium  
        prompt: "In Python, the correct syntax for an 'if-elif-else' chain requires ______ after each condition."  
        answer: "a colon (:)"  
        explanation: "Python uses colons (:) to indicate the start of a block after 'if', 'elif', or 'else'."  

      - id: if-fib-005  
        difficulty: medium  
        prompt: "An 'if' statement without an 'else' will simply ______ if the condition is false."  
        answer: "do nothing"  
        explanation: "If the 'if' condition is false and there is no 'else', the code inside the block is skipped."  

      - id: if-fib-006  
        difficulty: hard  
        prompt: "In a nested 'if' structure, each inner 'if' must be indented ______ than its outer 'if'."  
        answer: "further (with more spaces/tabs)"  
        explanation: "Python uses indentation to define code blocks, so inner 'if' statements must be indented deeper than their parent blocks."  

      - id: if-fib-007  
        difficulty: hard  
        prompt: "The ______ operator can be used to write a simple 'if-else' statement in a single line."  
        answer: "ternary (conditional)"  
        explanation: "Python's ternary operator (x if condition else y) allows concise single-line conditionals."  

  - topic: lists
    questions:
      - id: list-fib-001
        difficulty: easy
        prompt: "To create a list with elements 1, 2, and 3, we write: ______ = [1, 2, 3]"
        answer: "any_valid_variable_name"
        explanation: "Lists are created using square brackets, and can be assigned to any valid variable name."

      - id: list-fib-002
        difficulty: easy
        prompt: "To access the last element of list `my_list`, we use: my_list[______]"
        answer: "-1"
        explanation: "Negative indices count from the end (-1 is last element, -2 is second last, etc.)"

      - id: list-fib-003
        difficulty: medium
        prompt: "To get every second element from index 1 to 5 in `nums`, we write: nums[______]"
        answer: "1:6:2"
        explanation: "The slice start:stop:step gets elements from start to stop-1, stepping by step"

      - id: list-fib-004
        difficulty: easy
        prompt: "To add an element 5 to the end of `my_list`, we use: my_list.______(5)"
        answer: "append"
        explanation: "append() adds a single element to the end of the list"

      - id: list-fib-005
        difficulty: medium
        prompt: "To reverse a list `items` in-place, we use: items.______()"
        answer: "reverse"
        explanation: "The reverse() method reverses the list elements in their place"

      - id: list-fib-006
        difficulty: hard
        prompt: "To create a shallow copy of `original_list`, we can use: new_list = ______[:]"
        answer: "original_list"
        explanation: "Slicing with [:] creates a new copy of the entire list"

      - id: list-fib-007
        difficulty: medium
        prompt: "To find the index of first occurrence of 'apple' in `fruits`, we use: fruits.______('apple')"
        answer: "index"
        explanation: "index() returns the position of the first matching element"

      - id: list-fib-008
        difficulty: hard
        prompt: "To remove all elements from `my_list` while keeping the object, we use: my_list.______()"
        answer: "clear"
        explanation: "clear() empties the list while maintaining the list object"

    examples:
      - id: list-fib-ex-001
        code: |
          colors = ['red', 'green', 'blue']
          print(colors[______])
        prompt: "To print 'green' from the list, fill in the blank"
        answer: "1"
        explanation: "List indices start at 0, so 'green' is at position 1"

      - id: list-fib-ex-002
        code: |
          numbers = [1, 2, 3, 4, 5]
          subset = numbers[______]  # Gets [2, 3, 4]
        prompt: "Fill in the slice to get elements at indices 1 to 3"
        answer: "1:4"
        explanation: "Slices are start-inclusive and end-exclusive"

      - id: list-fib-ex-003
        code: |
          data = [10, 20, 30]
          data.______(40)
          print(data)  # Outputs [10, 20, 30, 40]
        prompt: "Fill in the method call to add 40 to the list"
        answer: "append"
        explanation: "append() adds an element to the end of the list"

  - topic: variables
    questions:
      - id: var-fib-001
        difficulty: easy
        prompt: "Variable names in Python must start with a letter or an __________."
        answer: "underscore"
        explanation: "Python variable names can begin with a letter (a-z, A-Z) or underscore (_), but not numbers or other characters."

      - id: var-fib-002
        difficulty: medium
        prompt: "Variables in Python are __________, meaning they can change type when assigned a new value."
        answer: "dynamic"
        explanation: "Python uses dynamic typing, allowing variables to hold values of any type and change types during execution."

      - id: var-fib-003
        difficulty: easy
        prompt: "The assignment operator in Python is the __________ symbol."
        answer: "equals"
        explanation: "The equals sign (=) is used for assignment in Python (e.g., x = 5)."

      - id: var-fib-001
        difficulty: easy
        prompt: "In Python, variable names are case-__________."
        answer: "sensitive"
        explanation: "Python treats myVar and myvar as different variables."

      - id: var-fib-002
        difficulty: easy
        prompt: "The __________ keyword is used to delete a variable in Python."
        answer: "del"
        explanation: "The del statement removes the binding of a variable."

      - id: var-fib-003
        difficulty: medium
        prompt: "Python variables are actually __________ to objects in memory."
        answer: "references"
        explanation: "Variables store references to objects rather than containing the objects themselves."

      - id: dyn-fib-001
        difficulty: medium
        prompt: "Python checks variable types at __________ rather than compile time."
        answer: "runtime"
        explanation: "This is why Python is called a dynamically typed language."

      - id: dyn-fib-002
        difficulty: hard
        prompt: "The __________ function can be used to check a variable's current type."
        answer: "type"
        explanation: "type(x) returns the class/type of object x currently references."

      - id: dyn-fib-003
        difficulty: medium
        prompt: "When you assign a = b, both variables become __________ to the same object."
        answer: "references"
        explanation: "Assignment creates a new reference, not a copy of the object."

      - id: none-fib-001
        difficulty: easy
        prompt: "The special value representing 'no value' in Python is __________."
        answer: "None"
        explanation: "None is Python's null/nothing value."

      - id: none-fib-002
        difficulty: medium
        prompt: "Functions without a return statement implicitly return __________."
        answer: "None"
        explanation: "This is why print(my_function()) shows None when the function has no return."

      - id: none-fib-003
        difficulty: hard
        prompt: "To properly check for None, you should use the __________ operator rather than ==."
        answer: "is"
        explanation: "The 'is' operator checks for identity with the None singleton."

  - topic: oop-encapsulation
    questions:
      - id: py-encap-001
        difficulty: easy
        prompt: "In Python, using a single underscore prefix (e.g., `_variable`) indicates a ________ variable by convention."
        answer: "protected"
        explanation: "A single underscore suggests the variable is for internal use, but Python doesn't enforce this restriction."

      - id: py-encap-002
        difficulty: easy
        prompt: "Double underscore prefix (e.g., `__variable`) triggers name ________ in Python."
        answer: "mangling"
        explanation: "Name mangling changes the variable name to `_ClassName__variable` to avoid naming conflicts in subclasses."

      - id: py-encap-003
        difficulty: medium
        prompt: "The `@property` decorator allows you to define a ________ method to control attribute access."
        answer: "getter"
        explanation: "The `@property` decorator creates a getter method that's called when accessing the attribute."

      - id: py-encap-004
        difficulty: medium
        prompt: "To create a setter for a property named 'age', you would use the `@________.setter` decorator."
        answer: "age"
        explanation: "The setter decorator must match the property name (e.g., `@age.setter` for a property named 'age')."

      - id: py-encap-005
        difficulty: easy
        prompt: "Encapsulation helps ________ the internal state of objects from direct external access."
        answer: "protect"
        explanation: "Encapsulation prevents direct access to an object's internal state, requiring controlled access through methods."

      - id: py-encap-006
        difficulty: medium
        prompt: "The Python built-in function ________ can check if an object has a particular attribute."
        answer: "hasattr()"
        explanation: "`hasattr(obj, 'attribute')` returns True if the object has the specified attribute."

      - id: py-encap-007
        difficulty: hard
        prompt: "To access a name-mangled variable `__var` from class `Person` outside the class, you would use `_Person________`."
        answer: "__var"
        explanation: "Name-mangled variables can be accessed externally using `_ClassName__variablename` format."

      - id: py-encap-008
        difficulty: easy
        prompt: "A ________ method is used to modify the value of a private attribute with validation."
        answer: "setter"
        explanation: "Setter methods allow controlled modification of private attributes with validation logic."

      - id: py-encap-009
        difficulty: medium
        prompt: "The ________ decorator allows you to define read-only properties in Python."
        answer: "@property"
        explanation: "Using `@property` without a setter creates a read-only attribute."

      - id: py-encap-010
        difficulty: hard
        prompt: "Encapsulation is one of the four OOP principles, along with inheritance, polymorphism, and ________."
        answer: "abstraction"
        explanation: "The four main OOP principles are encapsulation, abstraction, inheritance, and polymorphism."
  
    examples:
      - id: py-encap-ex-001
        code: |
          class BankAccount:
              def __init__(self, balance):
                  self._balance = balance

              def get_balance(self):
                  return self._balance
        prompt: The underscore prefix in `_balance` indicates this is a ________ variable.
        answer: protected
        explanation: "A single underscore is a naming convention indicating protected (internal-use) members."

      - id: py-encap-ex-002
        code: |
          class Temperature:
              def __init__(self):
                  self.__celsius = 0

              @property
              def celsius(self):
                  return self.__celsius

              @celsius.setter
              def celsius(self, value):
                  if value < -273.15:
                      raise ValueError("Temperature too low")
                  self.__celsius = value
        prompt: The `@property` decorator allows ________ access to the private `__celsius` attribute.
        answer: controlled
        explanation: "Properties provide controlled access to private attributes with validation logic."

      - id: py-encap-ex-003
        code: |
          class Student:
              def __init__(self, name):
                  self.__name = name

              def get_name(self):
                  return self.__name
              
              def set_name(self, new_name):
                  if len(new_name) < 2:
                      raise ValueError("Name too short")
                  self.__name = new_name
        prompt: This example demonstrates encapsulation by using ________ to access private attributes.
        answer: getter/setter methods
        explanation: "Getter/setter methods enforce validation while hiding implementation details."

      - id: py-encap-ex-004
        code: |
          class SecretVault:
              def __init__(self):
                  self.__password = "12345"

          vault = SecretVault()
          # This will print the mangled name
          print(dir(vault))
        prompt: The double underscores in `__password` trigger name ________.
        answer: mangling
        explanation: "Name mangling changes the attribute name to `_SecretVault__password`."

      - id: py-encap-ex-005
        code: |
          class Smartphone:
              def __init__(self):
                  self.__imei = "1234567890"
              
              @property
              def imei(self):
                  return "ACCESS DENIED"
        prompt: This property makes the `imei` attribute ________.
        answer: read-only
        explanation: "By not providing a setter, the property becomes read-only."

      - id: py-encap-ex-006
        code: |
          class Employee:
              def __init__(self, salary):
                  self._salary = salary

              def _calculate_bonus(self):
                  return self._salary * 0.1
        prompt: Both the `_salary` attribute and `_calculate_bonus` method use the ________ convention.
        answer: protected
        explanation: "Single underscore prefix indicates protected members (internal API)."

      - id: py-encap-ex-007
        code: |
          class GameCharacter:
              def __init__(self):
                  self.__health = 100
              
              def take_damage(self, amount):
                  self.__health = max(0, self.__health - amount)
        prompt: The `__health` attribute is ________ from direct external access.
        answer: hidden
        explanation: "Double underscore prefix makes it harder to access directly (name mangling)."

  - topic: classes
    questions:
      - id: py-co-001
        difficulty: easy
        prompt: In Python, you create a class using the ________ keyword.
        answer: class
        explanation: "In Python, the `class` keyword is used to define a new class. For example, `class MyClass:` defines a class named `MyClass`."

      - id: py-co-002
        difficulty: easy
        prompt: A class is a ________ for creating objects (instances).
        answer: blueprint
        explanation: ""

      - id: py-co-003
        difficulty: easy
        prompt: Objects are ________ of a class that have attributes (data) and methods (functions).
        answer: instances
        explanation: ""

      - id: py-co-004
        prompt: The `__init__` method is a special method that is automatically called when a new ________ of a class is created.
        answer: object
        explanation: ""

      - id: py-co-005
        prompt: Instance attributes are ________ to each instance (object) of a class.
        answer: unique
        explanation: ""

      - id: py-co-006
        prompt: The `self` parameter is used to access the ________ and ________ of an object within its methods.
        answer: attributes, methods
        explanation: ""

      - id: py-co-007
        prompt: Class attributes are shared across all ________ of the class, while instance attributes are specific to each ________.
        answer: objects, object
        explanation: ""

      - id: py-co-008
        prompt: To access an attribute of an object, use the ________ notation (e.g., `object.attribute`).
        answer: dot
        explanation: ""

      - id: py-co-009
        prompt: Changing the value of a ________ attribute will reflect across all objects of the class.
        answer: class
        explanation: ""

      - id: py-co-010
        prompt: Methods are ________ defined within a class that operate on the object's data.
        answer: functions
        explanation: ""
    examples:
      - id: py-co-ex-001
        code: |
          class Car:
              def describe(self):
                  print(f"{self.year} {self.make} {self.model}")
        prompt: The `describe` method is a ________ of the `Car` class.
        answer: method
        explanation: ""

      - id: py-co-ex-002
        code: |
          class Student:
              def set_grade(self, new_grade):
                  self.grade = new_grade
        prompt: The `set_grade` method is used to ________ the grade of a student.
        answer: update
        explanation: ""
    resources:
    - name: Learn Classes and Objects
      url: https://yasirbhutta.github.io/python/docs/classes.html
  - topic: oop-inheritance
    questions:
      - id: py-inh-002
        prompt: In Python, inheritance allows a new class to reuse code from an existing ________ class.
        answer: parent
        explanation: ""

      - id: py-inh-003
        prompt: A class that inherits from another class is called a ________ class.
        answer: child
        explanation: ""

      - id: py-inh-004
        prompt: To define a child class that inherits from a parent class, you include the parent class name in ________.
        answer: parentheses
        explanation: ""

      - id: py-inh-005
        prompt: The `super()` function is used to call methods from the ________ class.
        answer: parent
        explanation: ""

      - id: py-inh-006
        prompt: In method overriding, a child class provides its own version of a method that exists in the ________ class.
        answer: parent
        explanation: ""

      - id: py-inh-007
        prompt: When a child class does not override a method, it inherits the method from its ________ class.
        answer: parent
        explanation: ""

      - id: py-inh-008
        prompt: In multilevel inheritance, a class inherits from a child class, which in turn inherits from a ________ class.
        answer: parent
        explanation: ""

    examples:
      - id: py-inh-ex-001
        code: |
          class Person:
              def __init__(self, name):
                  self.name = name

              def introduce(self):
                  print(f"Hi, I'm {self.name}")

          class Student(Person):
              def study(self):
                  print(f"{self.name} is studying.")
        prompt: In the above code, the `Student` class ________ from the `Person` class.
        answer: inherits
        explanation: ""

      - id: py-inh-ex-002
        code: |
          class Vehicle:
              def __init__(self, brand):
                  self.brand = brand

              def drive(self):
                  print("The vehicle is moving.")

          class Car(Vehicle):
              def __init__(self, brand, model):
                  super().__init__(brand)
                  self.model = model

              def drive(self):
                  print(f"The {self.brand} {self.model} is driving.")
        prompt: The `Car` class uses the `super()` function to call the constructor of the ________ class.
        answer: Vehicle
        explanation: ""
    resources:
    - name: Learn Inheritance in Python
      url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html


  - topic: strings
    questions:
      - id: py-fb-str-001
        difficulty: easy
        prompt: "In Python, a string is a sequence of characters enclosed in ________."
        answer: quotes
        explanation: "Strings in Python are defined by enclosing characters within single ('') or double ('') quotes."

      - id: py-fb-str-002
        difficulty: easy
        prompt: "The operator used to concatenate two strings in Python is ________."
        answer: +
        explanation: "The '+' operator is used to concatenate (join) two or more strings in Python."

      - id: py-fb-str-003
        difficulty: easy
        prompt: "To repeat a string multiple times in Python, you use the ________ operator."
        answer: "*"
        explanation: "The '*' operator is used to repeat a string a specified number of times."

      - id: py-fb-str-004
        difficulty: easy
        prompt: "The method to convert all characters of a string to uppercase is ________."
        answer: upper()
        explanation: "The 'upper()' method returns a copy of the string with all characters converted to uppercase."

      - id: py-fb-str-005
        difficulty: easy
        prompt: "To remove leading and trailing spaces from a string, use the ________ method."
        answer: strip()
        explanation: "The 'strip()' method removes any leading and trailing characters (space is the default) from the string."

      - id: py-fb-str-006
        difficulty: easy
        prompt: "The method to check if all characters in a string are digits is ________."
        answer: isdigit()
        explanation: "The 'isdigit()' method returns True if all characters in the string are digits."

      - id: py-fb-str-007
        difficulty: easy
        prompt: "To replace all occurrences of a substring within a string, use the ________ method."
        answer: replace()
        explanation: "The 'replace()' method returns a copy of the string with all occurrences of a substring replaced with another substring."

      - id: py-fb-str-008
        difficulty: easy
        prompt: "The method to split a string into a list where each word is a list item is ________."
        answer: split()
        explanation: "The 'split()' method splits a string into a list where each word is a list item, using space as the default separator."

      - id: py-fb-str-009
        difficulty: easy
        prompt: "To check if a string starts with a specified substring, use the ________ method."
        answer: startswith()
        explanation: "The 'startswith()' method returns True if the string starts with the specified value."

      - id: py-fb-str-010
        difficulty: easy
        prompt: "The method to convert the first character of each word to uppercase is ________."
        answer: title()
        explanation: "The 'title()' method returns a string where the first character of each word is uppercase and the rest are lowercase."

      - id: py-sm-001
        difficulty: easy
        prompt: "The `________` method splits a string into three parts: before, separator, and after."
        answer: partition()
        explanation: >
          The `partition()` method splits the string at the first occurrence of the separator into a tuple containing 
          three elements: the part before the separator, the separator itself, and the part after.

      - id: py-sm-002
        difficulty: easy
        prompt: To divide a string into a list using a delimiter, we use the `________` method.
        answer: split()
        explanation: >
          The `split()` method breaks a string into a list using the specified delimiter. 
          If no delimiter is specified, it splits on whitespace by default.

      - id: py-sm-003
        difficulty: easy
        prompt: The `________` method searches for a substring and returns its lowest index in the string.
        answer: find()
        explanation: >
          The `find()` method returns the index of the first occurrence of the specified substring. 
          If the substring is not found, it returns -1.

      - id: py-sm-004
        difficulty: easy
        prompt: The `________` method replaces all instances of a substring with another string.
        answer: replace()
        explanation: >
          The `replace()` method returns a copy of the string where all occurrences of a substring 
          are replaced with another substring.

      - id: py-sm-005
        difficulty: easy
        prompt: If the substring is not found, the `find()` method returns `________`.
        answer: -1
        explanation: >
          If the `find()` method does not locate the specified substring, it returns -1, indicating no match was found.

    resources:
    - name: Learn String Methods & Formatting
      url: https://yasirbhutta.github.io/python/docs/strings.html

  - topic: lambda
    questions:
      - id: py-lambda-001
        difficulty: easy
        prompt: In Python, a lambda function is created using the ________ keyword.
        answer: lambda
        explanation: "Lambda functions in Python are defined using the `lambda` keyword followed by arguments and an expression."
        
      - id: py-lambda-002
        difficulty: easy
        prompt: A lambda function in Python can have any number of ________, but can only have one ________.
        answer: arguments, expression
        explanation: "Lambda functions can take any number of arguments, but they must consist of exactly one expression."
        
      - id: py-lambda-003
        difficulty: easy
        prompt: The syntax of a lambda function is ________.
        answer: "lambda arguments: expression"
        explanation: "The syntax for a lambda function is `lambda` followed by the arguments, a colon, and then the expression."

      - id: py-lambda-004
        difficulty: medium
        prompt: A lambda function is often used as an argument to a ________ function.
        answer: higher-order
        explanation: "Lambda functions are often passed as arguments to higher-order functions, which are functions that take another function as an argument."

      - id: py-lambda-005
        difficulty: easy
        prompt: "The following lambda function is used to add 10 to a number: `add_ten = ________ x: x + 10`."
        answer: lambda
        explanation: "This is a lambda function definition that adds 10 to the argument `x`."
        
      - id: py-lambda-006
        difficulty: easy
        prompt: "To multiply two numbers using a lambda function, the correct syntax would be `mul = ________ a, b: a * b`."
        answer: lambda
        explanation: "This lambda function takes two arguments, `a` and `b`, and returns their product."
        
      - id: py-lambda-007
        difficulty: easy
        prompt: "The lambda function `is_even = ________ x: x % 2 == 0` checks if a number is ________."
        answer: lambda, even
        explanation: "This lambda function checks if the number `x` is divisible by 2 (i.e., even)."
        
      - id: py-lambda-008
        difficulty: hard
        prompt: "In the example `(lambda x, y : x + y)(6,8)`, the lambda function is defined and then immediately ________ with two arguments."
        answer: called
        explanation: "This demonstrates an Immediately Invoked Function Expression (IIFE) where the lambda function is defined and called right away with the arguments `6` and `8`."

      - id: py-lambda-009
        difficulty: easy
        prompt: Lambda functions are often used when you need a ________ function without the need to formally define one.
        answer: small
        explanation: "Lambda functions are typically used for small, one-off functions that are not reused elsewhere in the code."

      - id: py-lambda-010
        difficulty: medium
        prompt: In Python, lambda functions can be used with ________ functions like `map()`, `filter()`, and `reduce()`.
        answer: higher-order
        explanation: "Higher-order functions take another function as an argument, and lambda functions are often used in such scenarios."

      - id: py-lambda-011
        difficulty: easy
        prompt: A lambda function in Python can return a value without using the ________ keyword.
        answer: return
        explanation: "Unlike regular functions, lambda functions don't need the `return` keyword to return a result. The expression itself is the return value."

      - id: py-lambda-016
        difficulty: easy
        prompt: The syntax of a lambda function requires a ________ after the `lambda` keyword.
        answer: list of arguments
        explanation: "After the `lambda` keyword, you list the arguments for the function, followed by a colon and the expression."

    resources:
    - name: "Understanding Python Lambda Functions: A Comprehensive Guide"
      url: https://yasirbhutta.github.io/python/docs/lambda/
