course: python
topics:

  - topic: loops-for
    questions:
      - id: for-tf-001
        difficulty: easy
        prompt: "A for loop in Python requires parentheses around its condition."
        answer: false
        explanation: >
          Python for loops use the syntax `for item in iterable:` without parentheses.
          Parentheses are used in some other languages but not in Python's for loops.

      - id: for-tf-002
        difficulty: easy
        prompt: "The range() function includes both the start and stop values in its sequence."
        answer: false
        explanation: >
          range(start, stop) generates numbers from start (inclusive) to stop (exclusive).
          For example, range(1, 5) produces 1, 2, 3, 4.

      - id: for-tf-003
        difficulty: medium
        prompt: "The else clause in a for loop executes only if the loop completes without encountering a break statement."
        answer: true
        explanation: >
          The else clause in Python's for loops is unique and executes only when
          the loop exhausts the iterable (for loop) or the condition becomes false (while loop)
          without hitting a break statement.

      - id: for-tf-004
        difficulty: easy
        prompt: "You can modify the list you're iterating over within a for loop without consequences."
        answer: false
        explanation: >
          Modifying a list while iterating over it can lead to unexpected behavior,
          including skipped elements or infinite loops. It's generally safer to
          iterate over a copy of the list if modifications are needed.

      - id: for-tf-005
        difficulty: medium
        prompt: "The continue statement skips the current iteration and moves to the next item in the sequence."
        answer: true
        explanation: >
          The continue statement immediately jumps to the next iteration of the loop,
          skipping any remaining code in the current iteration.

      - id: for-tf-006
        difficulty: hard
        prompt: "A for loop in Python can only iterate over numerical ranges created by the range() function."
        answer: false
        explanation: >
          Python for loops can iterate over any iterable, including lists, tuples,
          strings, dictionaries, sets, and custom iterable objects - not just numerical ranges.

      - id: for-tf-007
        difficulty: medium
        prompt: "In a nested for loop, a break statement in the inner loop will exit both the inner and outer loops."
        answer: false
        explanation: >
          A break statement only exits the innermost loop it's contained in.
          To exit multiple loops, you would need additional logic or flags.

      - id: for-tf-008
        difficulty: easy
        prompt: "The loop variable in a for loop maintains its value after the loop completes."
        answer: true
        explanation: >
          The loop variable remains in scope after the loop finishes and retains
          its last assigned value from the loop.

      - id: for-tf-009
        difficulty: medium
        prompt: "You can use a for loop to iterate over the key-value pairs of a dictionary using the items() method."
        answer: true
        explanation: >
          dict.items() returns an iterable view of (key, value) pairs, allowing
          you to iterate over both simultaneously: `for k, v in my_dict.items():`

      - id: for-tf-010
        difficulty: hard
        prompt: "List comprehensions are just syntactic sugar for equivalent for loops."
        answer: true
        explanation: >
          List comprehensions are indeed a more concise way to write certain for loops
          that build lists, and they compile to similar bytecode as the equivalent
          explicit for loop implementation.

  - topic: tuples
    questions:
      - id: tuple-tf-001
        difficulty: easy
        prompt: Tuples in Python are immutable.
        answer: true
        explanation: >
          Once a tuple is created, its elements cannot be changed, added, or removed.

      - id: tuple-tf-002
        difficulty: easy
        prompt: Tuples can contain elements of different data types.
        answer: true
        explanation: >
          A tuple can hold elements of various types, such as integers, strings, and even other tuples.

      - id: tuple-tf-003
        difficulty: easy
        prompt: The parentheses are required when creating a tuple.
        answer: false
        explanation: >
          While parentheses are commonly used, they're not strictly necessary. A tuple can be created by just separating values with commas.

      - id: tuple-tf-004
        difficulty: medium
        prompt: Tuple slicing works the same way as list slicing.
        answer: true
        explanation: >
          Both tuples and lists use the same slicing syntax and behavior, though tuples return new tuples while lists return new lists.

      - id: tuple-tf-005
        difficulty: medium
        prompt: The method 'append()' can be used to add an element to a tuple.
        answer: false
        explanation: >
          Tuples are immutable and don't support methods that modify them, including append().

      - id: tuple-tf-006
        difficulty: medium
        prompt: The expression 'my_tuple[1:3]' returns elements at index 1 and 2.
        answer: true
        explanation: >
          Slices are exclusive of the end index, so this returns elements from index 1 up to but not including index 3.

      - id: tuple-tf-007
        difficulty: easy
        prompt: The 'count()' method is available for tuples.
        answer: true
        explanation: >
          Tuples have the count() method which returns the number of times a specified value appears in the tuple.

      - id: tuple-tf-008
        difficulty: easy
        prompt: The 'index()' method can be used to find the position of an element in a tuple.
        answer: true
        explanation: >
          The index() method returns the first occurrence of the specified value in the tuple.

      - id: tuple-tf-009
        difficulty: medium
        prompt: Tuples are faster than lists for accessing elements.
        answer: true
        explanation: >
          Because of their immutability, tuples can be slightly faster than lists for element access operations.

      - id: tuple-tf-010
        difficulty: hard
        prompt: A tuple with a single element can be created by placing a comma after the element.
        answer: true
        explanation: >
          To create a single-element tuple, you need to include a trailing comma (e.g., (1,) or just 1,).

  - topic: if-elif-else
    questions:
      - id: if-tf-001
        difficulty: easy
        prompt: In Python, the 'elif' keyword is short for "else if".
        answer: true
        explanation: >
          'elif' is indeed Python's shorthand for "else if" and serves the same purpose as in other languages.

      - id: if-tf-002
        difficulty: easy
        prompt: An 'if' statement must always be followed by an 'else' block.
        answer: false
        explanation: >
          'else' blocks are optional in Python. An 'if' statement can stand alone or be paired with only 'elif' blocks.

      - id: if-tf-003
        difficulty: easy
        prompt: You can have multiple 'elif' blocks in a single 'if' statement.
        answer: true
        explanation: >
          Python allows any number of 'elif' blocks to handle multiple conditions after an initial 'if'.

      - id: if-tf-004
        difficulty: medium
        prompt: In Python, 'else if' is the correct syntax for adding additional conditions after an 'if' statement.
        answer: false
        explanation: >
          Python uses 'elif' for additional conditions, not 'else if'. Using 'else if' would result in a syntax error.

      - id: if-tf-005
        difficulty: medium
        prompt: The code in an 'else' block will execute only if all previous 'if' and 'elif' conditions were false.
        answer: true
        explanation: >
          The 'else' block serves as the default case that runs when no other conditions in the 'if-elif' chain were met.

      - id: if-tf-006
        difficulty: medium
        prompt: In Python, 'if' statements can be nested inside other 'if' statements.
        answer: true
        explanation: >
          Python allows nesting of 'if' statements, where one 'if' statement can be placed inside another's block.

      - id: if-tf-007
        difficulty: hard
        prompt: The 'elif' and 'else' blocks must be indented at the same level as their corresponding 'if' statement.
        answer: false
        explanation: >
          'elif' and 'else' blocks must be indented to match the 'if' they belong to, not the initial 'if' statement in nested cases.

      - id: if-tf-008
        difficulty: hard
        prompt: In Python, 'if' statements can be written on a single line without using colons.
        answer: false
        explanation: >
          While Python supports single-line 'if' statements (using the ternary operator for simple cases), colons are always required after the condition.

  - topic: lists
    questions:
      - id: list-tf-001
        difficulty: easy
        prompt: In Python, lists can contain elements of different data types.
        answer: true
        explanation: >
          Python lists are heterogeneous and can contain any mix of data types (e.g., [1, 'a', True, 3.14]).

      - id: list-tf-002
        difficulty: easy
        prompt: The index -1 in a list refers to the first element.
        answer: false
        explanation: >
          Negative indices count from the end, so -1 refers to the last element, -2 refers to the second last, etc.

      - id: list-tf-003
        difficulty: medium
        prompt: The expression `list('hello')` creates a list of individual characters.
        answer: true
        explanation: >
          When a string is passed to list(), it creates a list where each character becomes a separate element: ['h', 'e', 'l', 'l', 'o'].

      - id: list-tf-004
        difficulty: easy
        prompt: The slice my_list[1:3] includes the element at index 3.
        answer: false
        explanation: >
          Slicing is inclusive of the start index and exclusive of the end index, so it includes indices 1 and 2 but not 3.

      - id: list-tf-005
        difficulty: medium
        prompt: my_list[:] creates a shallow copy of the original list.
        answer: true
        explanation: >
          Using [:] without start or end indices creates a new list with all elements copied from the original.

      - id: list-tf-006
        difficulty: hard
        prompt: The slice my_list[::2] returns every third element of the list.
        answer: false
        explanation: >
          The step value of 2 returns every second element (elements at even indices), not every third element.

      - id: list-tf-007
        difficulty: easy
        prompt: The append() method can add multiple elements to a list at once.
        answer: false
        explanation: >
          append() adds a single element to the end of the list. To add multiple elements, use extend() or += operator.

      - id: list-tf-008
        difficulty: medium
        prompt: The sort() method modifies the original list and returns None.
        answer: true
        explanation: >
          sort() sorts the list in place and returns None, unlike sorted() which returns a new sorted list.

      - id: list-tf-009
        difficulty: hard
        prompt: The remove() method removes all occurrences of a value from a list.
        answer: false
        explanation: >
          remove() only removes the first occurrence of the specified value. To remove all occurrences, you need to use a loop or list comprehension.

      - id: list-tf-010
        difficulty: easy
        prompt: Lists in Python are immutable.
        answer: false
        explanation: >
          Lists are mutable - their elements can be changed after creation, unlike tuples which are immutable.

      - id: list-tf-011
        difficulty: medium
        prompt: The insert() method can add an element at any position in the list.
        answer: true
        explanation: >
          insert(index, element) allows you to add an element at any valid index, including at the beginning or end.

      - id: list-tf-012
        difficulty: hard
        prompt: The clear() method and assigning an empty list [] are identical operations.
        answer: false
        explanation: >
          clear() modifies the existing list object, while assigning [] creates a new list object. This affects other references to the list.

  - topic: variables
    questions:
      - id: var-tf-001
        difficulty: easy
        prompt: Variable names in Python are case-sensitive.
        answer: true
        explanation: >
          Python treats uppercase and lowercase letters as distinct (e.g., `myVar` and `myvar` are different variables).

      - id: var-tf-002
        difficulty: easy
        prompt: In Python, variables must be declared with a specific data type before they can be used.
        answer: false
        explanation: >
          Python uses dynamic typing - variables are created when first assigned a value, without explicit type declaration.

      - id: var-tf-003
        difficulty: easy
        prompt: The statement `x = 5` both creates the variable x and assigns it the value 5.
        answer: true
        explanation: >
          In Python, assignment to a new variable name automatically creates that variable.

      - id: var-tf-001
        difficulty: easy
        prompt: "Python variable names can start with a number."
        answer: false
        explanation: "Variable names must start with a letter (a-z, A-Z) or underscore (_)."

      - id: var-tf-002
        difficulty: easy
        prompt: "`x = y = 5` is a valid way to assign the same value to multiple variables."
        answer: true
        explanation: "Python allows chained assignments in a single line."

      - id: var-tf-003
        difficulty: easy
        prompt: "Variables must be explicitly deleted using `del` to free memory."
        answer: false
        explanation: "Python's garbage collector automatically handles memory management."

      # Dynamic Typing
      - id: var-tf-004
        difficulty: medium
        prompt: "Python is a statically typed language."
        answer: false
        explanation: "Python is dynamically typed - variable types are checked at runtime."

      - id: var-tf-005
        difficulty: medium
        prompt: "A variable can hold an integer first, then a string later in the same program."
        answer: true
        explanation: "Dynamic typing allows variables to change types during execution."

      - id: var-tf-006
        difficulty: medium
        prompt: "`type()` function returns the current type of a variable."
        answer: true
        explanation: "`type(x)` shows the type of object `x` currently references."

      # None Related
      - id: var-tf-007
        difficulty: easy
        prompt: "`None` is the same as `False` in Python."
        answer: false
        explanation: "`None` is a distinct object representing 'no value', while `False` is a boolean."

      - id: var-tf-008
        difficulty: medium
        prompt: "A function without a `return` statement returns `None`."
        answer: true
        explanation: "Python functions implicitly return `None` if no return statement exists."

      - id: var-tf-009
        difficulty: hard
        prompt: "`None` occupies zero bytes in memory."
        answer: false
        explanation: "`None` is a singleton object that does occupy memory (like any Python object)."

      # Advanced Variable Concepts
      - id: var-tf-010
        difficulty: medium
        prompt: "`x = None` is equivalent to not defining `x` at all."
        answer: false
        explanation: "`x = None` creates a variable bound to the `None` object, while an undefined variable raises a `NameError`."

      - id: var-tf-011
        difficulty: medium
        prompt: "In Python, `a = b` creates a copy of `b`'s value."
        answer: false
        explanation: "Assignment creates a new reference to the same object (aliasing), not a copy."

      - id: var-tf-012
        difficulty: hard
        prompt: "`None` can be used as a dictionary key."
        answer: true
        explanation: "`None` is hashable and can be used as a key, unlike mutable objects."
        
  - topic: oop-encapsulation
    questions:
      - id: py-tf-011
        difficulty: easy
        prompt: In Python, encapsulation is achieved only by using private variables (names starting with `__`).
        answer: false
        explanation: >
          Encapsulation can also be achieved using protected variables (`_`) and getter/setter methods, not just strict private variables.

      - id: py-tf-012
        difficulty: easy
        prompt: A class attribute marked with a single underscore (e.g., `_variable`) is treated as private and cannot be accessed outside the class.
        answer: false
        explanation: >
          A single underscore is a convention for "protected" members, but Python does not enforce access restrictions—it’s still accessible.

      - id: py-tf-013
        difficulty: medium
        prompt: Name mangling (e.g., `__variable`) in Python makes an attribute completely inaccessible from outside the class.
        answer: false
        explanation: >
          Name mangling (`__var`) makes it harder to access, but it can still be accessed using `_ClassName__var`.

      - id: py-tf-014
        difficulty: medium
        prompt: Getter and setter methods are necessary in Python to enforce encapsulation.
        answer: false
        explanation: >
          Python properties (`@property`) can be used to control access without explicit getter/setter methods.

      - id: py-tf-015
        difficulty: easy
        prompt: Encapsulation helps prevent accidental modification of internal class data.
        answer: true
        explanation: >
          Encapsulation restricts direct access to data, reducing unintended changes.

      - id: py-tf-016
        difficulty: easy
        prompt: In Python, all attributes are public by default unless explicitly marked private.
        answer: true
        explanation: >
          Python does not enforce strict private members; privacy is convention-based (`_` and `__`).

      - id: py-tf-017
        difficulty: medium
        prompt: A class that exposes all its attributes directly (without getters/setters) violates encapsulation.
        answer: true
        explanation: >
          Encapsulation is about controlling access to data, and exposing all attributes breaks this principle.

      - id: py-tf-018
        difficulty: medium
        prompt: The `@property` decorator in Python helps maintain encapsulation by allowing controlled attribute access.
        answer: true
        explanation: >
          `@property` lets you add logic when getting/setting attributes while keeping the interface clean.

      - id: py-tf-019
        difficulty: hard
        prompt: A subclass cannot access the private attributes (with `__`) of its parent class.
        answer: true
        explanation: >
          Due to name mangling, a subclass cannot directly access `__var` from a parent, but it can via `_ParentClass__var`.

      - id: py-tf-020
        difficulty: easy
        prompt: Encapsulation is only useful for security purposes.
        answer: false
        explanation: >
          Encapsulation also improves maintainability, reduces bugs, and helps in modular design—not just security.
  - topic: oop-polymorphism
    questions:
      - id: py-tf-001
        difficulty: easy
        prompt: In Python, polymorphism is only possible through inheritance.
        answer: false
        explanation: >
          Polymorphism in Python can be achieved through both inheritance (method overriding) and duck typing (shared interfaces), not just inheritance.

      - id: py-tf-002
        difficulty: easy
        prompt: Polymorphism allows objects of different classes to be treated as objects of a common superclass.
        answer: true
        explanation: >
          Polymorphism enables treating different class instances through a common interface, allowing for flexible and reusable code.

      - id: py-tf-003
        difficulty: easy
        prompt: The built-in len() function in Python is an example of polymorphism.
        answer: true
        explanation: >
          The len() function works with different types (strings, lists, tuples, etc.) because they all implement the __len__() method, demonstrating polymorphism.

      - id: py-tf-004
        difficulty: medium
        prompt: Method overloading is a common way to achieve polymorphism in Python.
        answer: false
        explanation: >
          Python doesn't support method overloading (multiple methods with same name but different parameters) in the traditional sense. Polymorphism is typically achieved through method overriding or duck typing.

      - id: py-tf-005
        difficulty: medium
        prompt: Duck typing is a form of polymorphism where the suitability of an object is determined by the presence of certain methods and properties.
        answer: true
        explanation: >
          Duck typing ("if it walks like a duck and quacks like a duck...") is a Pythonic approach to polymorphism that focuses on an object's behavior rather than its type.

      - id: py-tf-006
        difficulty: hard
        prompt: Python's abstract base classes (ABCs) prevent polymorphism from occurring.
        answer: false
        explanation: >
          ABCs actually facilitate polymorphism by enforcing a common interface that subclasses must implement, while still allowing different implementations.

      - id: py-tf-007
        difficulty: easy
        prompt: The + operator in Python behaves differently with strings and numbers, demonstrating polymorphism.
        answer: true
        explanation: >
          The + operator performs concatenation with strings and addition with numbers, showing operator overloading which is a form of polymorphism.
  - topic: oop-inheritance
    questions:
      - id: py-tf-001
        difficulty: easy
        prompt: In Python, a child class can inherit from only one parent class.
        answer: false
        explanation: >
          Python supports multiple inheritance, allowing a child class to inherit from multiple parent classes.

      - id: py-tf-002
        difficulty: easy
        prompt: The `super()` function is used to call a method from a parent class.
        answer: true
        explanation: >
          The `super()` function allows access to methods from a parent class, especially useful in method overriding.

      - id: py-tf-003
        difficulty: easy
        prompt: Method overriding allows a subclass to provide a specific implementation of a method already defined in its parent class.
        answer: true
        explanation: >
          Method overriding lets a subclass define its own version of a method inherited from the parent class.

      - id: py-tf-004
        difficulty: easy
        prompt: In Python, private attributes (prefixed with double underscores) are directly accessible in subclasses.
        answer: false
        explanation: >
          Private attributes are name-mangled and not directly accessible in subclasses.

      - id: py-tf-005
        difficulty: easy
        prompt: The `__init__` method is automatically called when a new object of a class is instantiated.
        answer: true
        explanation: >
          The `__init__` method initializes the object's state upon creation.
    resources:
    - name: Learn Inheritance in Python
      url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html
  - topic: strings
    questions:
      - id: py-tf-001
        difficulty: medium
        prompt: Strings in Python are mutable.
        answer: false
        explanation: >
          Strings in Python are immutable, meaning their content cannot be changed after creation.

      - id: py-tf-002
        difficulty: easy
        prompt: You can use both single (' ') and double (" ") quotes to define a string in Python.
        answer: true
        explanation: >
          Python allows strings to be defined using either single or double quotes.

      - id: py-tf-003
        difficulty: easy
        prompt: The len() function is used to determine the length of a string.
        answer: true
        explanation: >
          The built-in len() function returns the number of characters in a string.

      - id: py-tf-004
        difficulty: easy
        prompt: The upper() method changes all the characters in a string to lowercase.
        answer: false
        explanation: >
          The upper() method converts all characters in a string to uppercase.

      - id: py-tf-005
        difficulty: easy
        prompt: You can concatenate strings using the + operator in Python.
        answer: true
        explanation: >
          The + operator is used to join or concatenate two or more strings.

      - id: py-tf-006
        difficulty: easy
        prompt: The strip() method removes characters from the middle of a string.
        answer: false
        explanation: >
          The strip() method removes leading and trailing whitespace from a string.

      - id: py-tf-007
        difficulty: easy
        prompt: String indexing in Python starts from 1.
        answer: false
        explanation: >
          Python uses zero-based indexing, so the first character of a string is at index 0.

      - id: py-tf-008
        difficulty: easy
        prompt: The replace() method can be used to change specific parts of a string.
        answer: true
        explanation: >
          The replace() method returns a new string with all occurrences of a substring replaced.

      - id: py-tf-009
        difficulty: easy
        prompt: You cannot loop through a string using a for loop.
        answer: false
        explanation: >
          Strings are iterable in Python, so you can loop through them character by character.

      - id: py-tf-010
        difficulty: easy
        prompt: The in keyword checks whether a substring exists in a string.
        answer: true
        explanation: >
          The in keyword returns True if the specified substring is found in the string.

      - id: py-tf-011
        difficulty: easy
        prompt: Strings in Python support slicing.
        answer: true
        explanation: >
          Python allows slicing of strings using the syntax string[start:stop:step].

      - id: py-tf-012
        difficulty: easy
        prompt: Triple quotes are used for multi-line strings in Python.
        answer: true
        explanation: >
          Triple single (''') or double quotes (""") can define multi-line strings.

      - id: py-tf-013
        difficulty: easy
        prompt: The find() method returns -1 if the substring is not found.
        answer: true
        explanation: >
          The find() method returns the lowest index of the substring, or -1 if not found.

      - id: py-tf-014
        difficulty: easy
        prompt: Python allows escape characters like \n for new lines and \t for tabs.
        answer: true
        explanation: >
          Python uses backslash (\) escape sequences such as \n for newline and \t for tab.

      - id: py-tf-015
        difficulty: medium
        prompt: You can change a specific character in a string using indexing.
        answer: false
        explanation: >
          Strings are immutable in Python, so you cannot change characters via indexing.

      - id: py-str-tf-001
        difficulty: easy
        prompt: The `split()` method modifies the original string in-place.
        answer: false
        explanation: >
          The `split()` method returns a new list and does not alter the original string.

      - id: py-str-tf-002
        difficulty: easy
        prompt: The `partition()` method always returns a tuple with exactly three elements.
        answer: true
        explanation: >
          Regardless of whether the separator is found, `partition()` always returns a 3-part tuple.

      - id: py-str-tf-003
        difficulty: easy
        prompt: The `replace()` method can be used to substitute multiple different substrings at once.
        answer: false
        explanation: >
          The `replace()` method handles only one substring replacement at a time unless nested or chained.

      - id: py-str-tf-004
        difficulty: easy
        prompt: The `find()` method is case-sensitive.
        answer: true
        explanation: >
          The `find()` method distinguishes between uppercase and lowercase letters during a search.

      - id: py-str-tf-005
        difficulty: easy
        prompt: If the separator is not found, `partition()` returns the original string and two empty strings.
        answer: true
        explanation: >
          When the separator is missing, `partition()` returns (original_string, '', '').

    resources:
    - name: Learn String Methods & Formatting
      url: https://yasirbhutta.github.io/python/docs/strings.html
  - topic: lambda
    questions:
      - id: py-tf-001
        difficulty: easy
        prompt: A lambda function in Python can have multiple expressions separated by commas.
        answer: false
        explanation: >
          A lambda function can only have one single expression. It cannot contain multiple independent expressions.

      - id: py-tf-002
        difficulty: easy
        prompt: The `lambda` keyword is used to create anonymous functions in Python.
        answer: true
        explanation: >
          Lambda functions are anonymous, meaning they are not necessarily bound to a name, and are created using the `lambda` keyword.

      - id: py-tf-003
        difficulty: easy
        prompt: Lambda functions must always be assigned to a variable before being used.
        answer: false
        explanation: >
          Lambda functions can be used immediately without being assigned to a variable, for example by invoking them directly.

      - id: py-tf-004
        difficulty: medium
        prompt: In Python, you can pass lambda functions as arguments to higher-order functions like `map()` and `filter()`.
        answer: true
        explanation: >
          Higher-order functions accept other functions as arguments, and lambda functions are often used for this purpose.

      - id: py-tf-005
        difficulty: medium
        prompt: The result of a lambda function must always be a numeric value.
        answer: false
        explanation: >
          A lambda function can return any type of result — numeric, string, list, or even an object, depending on its

    resources:
    - name: "Understanding Python Lambda Functions: A Comprehensive Guide"
      url: https://yasirbhutta.github.io/python/docs/lambda/
