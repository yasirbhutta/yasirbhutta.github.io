course: python
topics:
  - topic: oop-inheritance
    questions:
      - id: py-tf-001
        difficulty: easy
        prompt: In Python, a child class can inherit from only one parent class.
        answer: false
        explanation: >
          Python supports multiple inheritance, allowing a child class to inherit from multiple parent classes.

      - id: py-tf-002
        difficulty: easy
        prompt: The `super()` function is used to call a method from a parent class.
        answer: true
        explanation: >
          The `super()` function allows access to methods from a parent class, especially useful in method overriding.

      - id: py-tf-003
        difficulty: easy
        prompt: Method overriding allows a subclass to provide a specific implementation of a method already defined in its parent class.
        answer: true
        explanation: >
          Method overriding lets a subclass define its own version of a method inherited from the parent class.

      - id: py-tf-004
        difficulty: easy
        prompt: In Python, private attributes (prefixed with double underscores) are directly accessible in subclasses.
        answer: false
        explanation: >
          Private attributes are name-mangled and not directly accessible in subclasses.

      - id: py-tf-005
        difficulty: easy
        prompt: The `__init__` method is automatically called when a new object of a class is instantiated.
        answer: true
        explanation: >
          The `__init__` method initializes the object's state upon creation.
    resources:
    - name: Learn Inheritance in Python
      url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html

  - topic: strings
    questions:
      - id: py-tf-001
        difficulty: medium
        prompt: Strings in Python are mutable.
        answer: false
        explanation: >
          Strings in Python are immutable, meaning their content cannot be changed after creation.

      - id: py-tf-002
        difficulty: easy
        prompt: You can use both single (' ') and double (" ") quotes to define a string in Python.
        answer: true
        explanation: >
          Python allows strings to be defined using either single or double quotes.

      - id: py-tf-003
        difficulty: easy
        prompt: The len() function is used to determine the length of a string.
        answer: true
        explanation: >
          The built-in len() function returns the number of characters in a string.

      - id: py-tf-004
        difficulty: easy
        prompt: The upper() method changes all the characters in a string to lowercase.
        answer: false
        explanation: >
          The upper() method converts all characters in a string to uppercase.

      - id: py-tf-005
        difficulty: easy
        prompt: You can concatenate strings using the + operator in Python.
        answer: true
        explanation: >
          The + operator is used to join or concatenate two or more strings.

      - id: py-tf-006
        difficulty: easy
        prompt: The strip() method removes characters from the middle of a string.
        answer: false
        explanation: >
          The strip() method removes leading and trailing whitespace from a string.

      - id: py-tf-007
        difficulty: easy
        prompt: String indexing in Python starts from 1.
        answer: false
        explanation: >
          Python uses zero-based indexing, so the first character of a string is at index 0.

      - id: py-tf-008
        difficulty: easy
        prompt: The replace() method can be used to change specific parts of a string.
        answer: true
        explanation: >
          The replace() method returns a new string with all occurrences of a substring replaced.

      - id: py-tf-009
        difficulty: easy
        prompt: You cannot loop through a string using a for loop.
        answer: false
        explanation: >
          Strings are iterable in Python, so you can loop through them character by character.

      - id: py-tf-010
        difficulty: easy
        prompt: The in keyword checks whether a substring exists in a string.
        answer: true
        explanation: >
          The in keyword returns True if the specified substring is found in the string.

      - id: py-tf-011
        difficulty: easy
        prompt: Strings in Python support slicing.
        answer: true
        explanation: >
          Python allows slicing of strings using the syntax string[start:stop:step].

      - id: py-tf-012
        difficulty: easy
        prompt: Triple quotes are used for multi-line strings in Python.
        answer: true
        explanation: >
          Triple single (''') or double quotes (""") can define multi-line strings.

      - id: py-tf-013
        difficulty: easy
        prompt: The find() method returns -1 if the substring is not found.
        answer: true
        explanation: >
          The find() method returns the lowest index of the substring, or -1 if not found.

      - id: py-tf-014
        difficulty: easy
        prompt: Python allows escape characters like \n for new lines and \t for tabs.
        answer: true
        explanation: >
          Python uses backslash (\) escape sequences such as \n for newline and \t for tab.

      - id: py-tf-015
        difficulty: medium
        prompt: You can change a specific character in a string using indexing.
        answer: false
        explanation: >
          Strings are immutable in Python, so you cannot change characters via indexing.

      - id: py-str-tf-001
        difficulty: easy
        prompt: The `split()` method modifies the original string in-place.
        answer: false
        explanation: >
          The `split()` method returns a new list and does not alter the original string.

      - id: py-str-tf-002
        difficulty: easy
        prompt: The `partition()` method always returns a tuple with exactly three elements.
        answer: true
        explanation: >
          Regardless of whether the separator is found, `partition()` always returns a 3-part tuple.

      - id: py-str-tf-003
        difficulty: easy
        prompt: The `replace()` method can be used to substitute multiple different substrings at once.
        answer: false
        explanation: >
          The `replace()` method handles only one substring replacement at a time unless nested or chained.

      - id: py-str-tf-004
        difficulty: easy
        prompt: The `find()` method is case-sensitive.
        answer: true
        explanation: >
          The `find()` method distinguishes between uppercase and lowercase letters during a search.

      - id: py-str-tf-005
        difficulty: easy
        prompt: If the separator is not found, `partition()` returns the original string and two empty strings.
        answer: true
        explanation: >
          When the separator is missing, `partition()` returns (original_string, '', '').

    resources:
    - name: Learn String Methods & Formatting
      url: https://yasirbhutta.github.io/python/docs/strings.html

  - topic: lambda
    questions:
      - id: py-tf-001
        difficulty: easy
        prompt: A lambda function in Python can have multiple expressions separated by commas.
        answer: false
        explanation: >
          A lambda function can only have one single expression. It cannot contain multiple independent expressions.

      - id: py-tf-002
        difficulty: easy
        prompt: The `lambda` keyword is used to create anonymous functions in Python.
        answer: true
        explanation: >
          Lambda functions are anonymous, meaning they are not necessarily bound to a name, and are created using the `lambda` keyword.

      - id: py-tf-003
        difficulty: easy
        prompt: Lambda functions must always be assigned to a variable before being used.
        answer: false
        explanation: >
          Lambda functions can be used immediately without being assigned to a variable, for example by invoking them directly.

      - id: py-tf-004
        difficulty: medium
        prompt: In Python, you can pass lambda functions as arguments to higher-order functions like `map()` and `filter()`.
        answer: true
        explanation: >
          Higher-order functions accept other functions as arguments, and lambda functions are often used for this purpose.

      - id: py-tf-005
        difficulty: medium
        prompt: The result of a lambda function must always be a numeric value.
        answer: false
        explanation: >
          A lambda function can return any type of result â€” numeric, string, list, or even an object, depending on its

    resources:
    - name: "Understanding Python Lambda Functions: A Comprehensive Guide"
      url: https://yasirbhutta.github.io/python/docs/lambda/
