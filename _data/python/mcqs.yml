course: python
topics:
  - topic: oop-inheritance
    questions:
      - id: py-inh-002
        difficulty: medium
        question: |
          What is the output of the following Python code?

          class Parent:
              def greet(self):
                  print("Hello from Parent")

          class Child(Parent):
              def greet(self):
                  print("Hello from Child")
                  Parent.greet(self)     
                  super().greet()         

          obj = Child()
          obj.greet()
        options:
          - |
            Hello from Child
            Hello from Parent
            Hello from Parent
          - |
            Hello from Parent
            Hello from Child
            Hello from Parent
          - |
            Hello from Child
            Hello from Child
            Hello from Parent
          - |
            Hello from Parent
            Hello from Parent
            Hello from Child
        answer: |
          Hello from Child
          Hello from Parent
          Hello from Parent
        explanation: |
          The `Child.greet()` method prints "Hello from Child", then explicitly calls `Parent.greet(self)` and `super().greet()`, both of which call the `Parent` class's `greet()` method, resulting in "Hello from Parent" printed twice.

      - id: py-inh-001
        difficulty: easy
        question: What is the main purpose of inheritance in Python?
        options:
          - To create multiple objects of a class
          - To reuse code and extend functionality
          - To define private methods in a class
          - To create a new programming paradigm
        answer: To reuse code and extend functionality
        explanation: Inheritance allows code reuse and method overriding in child classes.
      - id: py002
        difficulty: easy
        question: Which of the following is the correct syntax for inheritance in Python?
        options:
          - "class Child inherits Parent:"
          - "class Child(Parent):"
          - "class Parent -> Child:"
          - "class Parent(Child):"
        answer: "class Child(Parent):"
        explanation: In Python, a child class is defined using the syntax `class Child(Parent):`, where `Child` inherits from `Parent`.
      - id: inh001
        difficulty: easy
        question: What is the output of the following code?
        code: |
          class Animal:
              def speak(self):
                  print("Animal speaks")

          class Dog(Animal):
              pass

          d = Dog()
          d.speak()
        options:
          - Animal speaks
          - Dog speaks
          - "Error: **speak()** not defined"
          - Nothing
        answer: Animal speaks
        explanation: Dog inherits the `speak()` method from Animal.

      - id: inh002
        difficulty: easy
        question: What is the output of the following code?
        code: |
          class Parent:
              def __init__(self):
                  print("Parent constructor")

          class Child(Parent):
              def __init__(self):
                  print("Child constructor")

          c = Child()
        options:
          - Parent constructor
          - Child constructor
          - Parent constructor Child constructor
          - Error
        answer: Child constructor
        explanation: The `Child` constructor overrides the `Parent` constructor.

      - id: inh003
        difficulty: medium
        question: What is the output of the following code?
        code: |
          class Parent:
              def show(self):
                  print("Parent")

          class Child(Parent):
              def show(self):
                  print("Child")

          obj = Child()
          obj.show()
        options:
          - Parent
          - Child
          - Parent Child
          - Error
        answer: Child

      - id: py-inh-001
        difficulty: easy
        question: What is the primary purpose of inheritance in Python?
        options:
          - To improve memory efficiency
          - To hide implementation details
          - To enable code reusability
          - To reduce program complexity
        answer: To enable code reusability
        explanation: Inheritance helps avoid code duplication by allowing child classes to reuse methods and properties of parent classes.

      - id: py-inh-002
        difficulty: easy
        question: Which syntax correctly defines a class `Child` inheriting from `Parent`?
        options:
          - class Child extends Parent:
          - class Child(Parent):
          - class Child inherits Parent:
          - class Child : Parent
        answer: "class Child(Parent):"
        explanation: In Python, inheritance is denoted by placing the parent class name in parentheses after the child class name.

      - id: py-inh-003
        difficulty: medium
        question: What is the output of the following code?
        code: |
          class Parent:
              def greet(self):
                  print("Hello from Parent!")
          
          class Child(Parent):
              def greet(self):
                  print("Hello from Child!")

          obj = Child()
          obj.greet()
        options:
          - Hello from Parent!
          - Hello from Child!
          - Error
          - No output
        answer: Hello from Child!
        explanation: The `greet` method is overridden in the `Child` class, so that version is called.

      - id: py-inh-004
        difficulty: medium
        question: What does the `super()` function do?
        options:
          - Returns the base class instance
          - Calls a method from a sibling class
          - Calls a method from the parent class
          - Creates a new subclass
        answer: Calls a method from the parent class
        explanation: "`super()` is used to call methods from the parent class, especially in method overrides"

      - id: py-inh-005
        difficulty: hard
        question: Which type of inheritance is NOT supported in Python?
        options:
          - Single
          - Multiple
          - Cascading
          - Multilevel
        answer: Cascading
        explanation: Python supports single, multiple, and multilevel inheritance, but "cascading" is not a recognized inheritance type.

      - id: py-inh-006
        difficulty: medium
        question: "In multiple inheritance, the method resolution order (MRO) follows:"
        options:
          - Depth-first search
          - Breadth-first search
          - C3 linearization
          - Random order
        answer: C3 linearization
        explanation: Python uses C3 linearization to determine the order in which classes are searched when executing a method.

      - id: py-inh-007
        difficulty: hard
        question: How do you explicitly call a parent class method from a child class?
        options:
          - Parent.method(self)
          - self.parent_method()
          - super().method()
          - Both A and C
        answer: Both A and C
        explanation: You can call a parent method using either `Parent.method(self)` or `super().method()`.

      - id: py-inh-008
        difficulty: hard
        question: Which statement about private members (e.g., `__var`) in inheritance is true?
        options:
          - They are directly accessible in subclasses
          - They are inaccessible due to name mangling
          - They can be accessed using `super()`
          - They are inherited without name mangling
        answer: They are inaccessible due to name mangling
        explanation: Private members with double underscores are name-mangled and not directly accessible from subclasses.

      - id: py-inh-009
        difficulty: medium
        question: What does `isinstance(child_obj, Parent)` return?
        options:
          - True
          - False
          - TypeError
          - None
        answer: True
        explanation: If `child_obj` is an instance of a class derived from `Parent`, `isinstance` will return `True`.

      - id: py-inh-010
        difficulty: hard
        question: "Hybrid inheritance refers to:"
        options:
          - Combining multiple types of inheritance
          - Inheriting from two parent classes
          - Overriding all parent methods
          - Using interfaces only
        answer: Combining multiple types of inheritance
        explanation: Hybrid inheritance is a combination of more than one type of inheritance, like multiple and multilevel.
    resources:
    - name: Learn Inheritance in Python
      url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html

  - topic: oop-polymorphism
    questions:
      - id: py011
        difficulty: medium
        question: What is polymorphism in Python?
        options:
          - Inheritance of attributes from a class
          - The ability of different classes to provide different implementations of the same method
          - The process of creating objects from a class
          - None of the above
        answer: The ability of different classes to provide different implementations of the same method
        explanation: Polymorphism allows methods to be defined in multiple classes with different implementations.
      - id: py012
        difficulty: medium
        question: Which function is used to determine the type of an object in Python?
        options:
          - type()
          - isinstance()
          - object()
          - None of the above
        answer: type()
        explanation: The `type()` function is used to determine the type of an object in Python.
    resources:
    - name: Learn Polymorphism in Python
      url: https://yasirbhutta.github.io/python/docs/oop-polymorphism.html

  - topic: strings
    questions:
      - id: py-str-001
        difficulty: easy
        question: What will be the output of the following code?
        code: |
          name = "Alice"
          print(name[1])
        options:
          - A
          - l
          - i
          - e
        answer: l
        explanation: Indexing in strings starts at 0, so `name[1]` gives the second character, which is 'l'.

      - id: py-str-002
        difficulty: easy
        question: Which method converts a string to all uppercase letters?
        options:
          - capitalize()
          - upper()
          - title()
          - swapcase()
        answer: upper()
        explanation: The `upper()` method converts all characters in a string to uppercase.

      - id: py-str-003
        difficulty: easy
        question: What does the `strip()` method do?
        options:
          - Removes only leading spaces
          - Removes only trailing spaces
          - Removes both leading and trailing spaces
          - Removes all spaces inside the string
        answer: Removes both leading and trailing spaces
        explanation: The `strip()` method removes whitespace from both ends of the string.

      - id: py-str-004
        difficulty: easy
        question: What is the output of the following code?
        code: |
          word = "HELLO"
          print(word.lower())
        options:
          - Hello
          - hello
          - HELLO
          - error
        answer: hello
        explanation: The `lower()` method converts all uppercase letters in a string to lowercase.

      - id: py-str-005
        difficulty: easy
        question: What is the output of this code?
        code: |
          text = "python"
          print(text.title())
        options:
          - Python
          - PYTHON
          - python
          - P y t h o n
        answer: Python

      - id: py-str-003
        difficulty: easy
        question: What does the `strip()` method do?
        options:
          - Removes only leading spaces
          - Removes only trailing spaces
          - Removes both leading and trailing spaces
          - Removes all spaces inside the string
        answer: Removes both leading and trailing spaces
        explanation: The `strip()` method removes whitespace from both ends of the string.

      - id: py-str-004
        difficulty: easy
        question: What is the output of the following code?
        code: |
          word = "HELLO"
          print(word.lower())
        options:
          - Hello
          - hello
          - HELLO
          - error
        answer: hello
        explanation: The `lower()` method converts all uppercase letters in a string to lowercase.

      - id: py-str-005
        difficulty: easy
        question: What is the output of the following code?
        code: |
          text = "python"
          print(text.title())
        options:
          - Python
          - PYTHON
          - python
          - P y t h o n
        answer: Python
        explanation: The `title()` method capitalizes the first letter of each word in the string.

      - id: py-str-001
        difficulty: easy
        question: What does the `split()` method return?
        options:
          - A single string
          - A tuple
          - A dictionary
          - A list of strings
        answer: A list of strings
        explanation: The `split()` method divides a string into a list based on a specified delimiter.

      - id: py-str-002
        difficulty: easy
        question: What will be the output of this code?
        code: |
          "apple,banana,grape".split(",")
        options:
          - "['apple', 'banana', 'grape']"
          - ('apple', 'banana', 'grape')
          - 'apple banana grape'
          - ['apple,banana,grape']
        answer: "['apple', 'banana', 'grape']"
        explanation: The `split(",")` method splits the string wherever it finds a comma and returns a list.

      - id: py-str-003
        difficulty: medium
        question: What does the `partition()` method return?
        options:
          - Only the substring before the separator
          - A list of split strings
          - A tuple of three parts
          - A dictionary of parts
        answer: A tuple of three parts
        explanation: "The artition() method splits a string into three parts: before the separator, the separator itself, and after."

      - id: py-str-004
        difficulty: easy
        question: Which method can be used to replace all occurrences of a substring with another substring?
        options:
          - change()
          - substitute()
          - switch()
          - replace()
        answer: replace()
        explanation: The `replace()` method is used to replace all occurrences of a specified substring.

      - id: py-str-005
        difficulty: medium
        question: What is the output of the following code?
        code: |
          "hello world".find("o")
        options:
          - 4
          - 5
          - 6
          - -1
        answer: 4
        explanation: The `find()` method returns the first index of the substring "o", which is 4.

    resources:
    - name: Learn String Methods & Formatting
      url: https://yasirbhutta.github.io/python/docs/strings.html

  - topic: lambda
    questions:
      - id: py-lambda-001
        difficulty: easy
        language: python
        question: |
          What is the output of the following Python code?
        code: |
          add_ten = lambda x: x + 10
          print(add_ten(5))
        options:
          - 15
          - 10
          - 5
          - 20
        answer: 15
        explanation: |
          The lambda function adds 10 to the given input. 5 + 10 = 15.

      - id: py-lambda-002
        difficulty: easy
        language: python
        question: |
          What is the output of the following Python code?
        code: |
          mul = lambda a, b: a * b
          print(mul(2, 4))
        options:
          - 6
          - 8
          - 4
          - 2
        answer: 8
        explanation: |
          The lambda function multiplies the two inputs: 2 * 4 = 8.

      - id: py-lambda-003
        difficulty: easy
        language: python
        question: |
          What is the output of the following Python code?
        code: |
          is_even = lambda x: x % 2 == 0
          print(is_even(6))
        options:
          - True
          - False
          - None
          - 0
        answer: True
        explanation: |
          6 is divisible by 2, so the lambda function returns True.

      - id: py-lambda-004
        difficulty: easy
        language: python
        question: |
          What is the output of the following Python code?
        code: |
          (lambda x, y: x + y)(6, 8)
        options:
          - 14
          - 48
          - 68
          - 86
        answer: 14
        explanation: |
          The lambda function adds 6 and 8, resulting in 14.

      - id: py-lambda-005
        difficulty: easy
        language: python
        question: |
          What is the output of the following Python code?
        code: |
          result = (lambda x, y: x * y)(5, 3)
          print(result)
        options:
          - 15
          - 8
          - 5
          - 3
        answer: 15
        explanation: |
          The lambda function multiplies 5 and 3, resulting in 15.

      - id: py-lambda-006
        difficulty: hard
        language: python
        question: |
          What is the output of the following Python code?
        code: |
          multiply = lambda x, y: x * y
          mult = lambda x, y: multiply(x, y)
          result = mult(6, 2)
          print(result)
        options:
          - 8
          - 12
          - 6
          - 2
        answer: 12
        explanation: |
          The first lambda `multiply` multiplies two numbers. The second lambda `mult` calls the first, so 6 * 2 = 12.

    resources:
    - name: "Understanding Python Lambda Functions: A Comprehensive Guide"
      url: https://yasirbhutta.github.io/python/docs/lambda/