course: python
topics:
  - topic: oop-encapsulation
    questions:
      - id: py-encap-001
        prompt: What is the main purpose of encapsulation in Python?
        answer: To protect an object's internal state from direct external access and modification.
        resources:
          - name: Python Encapsulation
            url: https://www.geeksforgeeks.org/encapsulation-in-python/

      - id: py-encap-002
        prompt: What does a single underscore prefix (e.g., `_variable`) indicate in Python?
        answer: It indicates a protected variable that should only be accessed within the class or its subclasses (convention only).
        resources:
          - name: Python Naming Conventions
            url: https://peps.python.org/pep-0008/#method-names-and-instance-variables

      - id: py-encap-003
        prompt: What is name mangling in Python?
        answer: When Python changes a variable name (e.g., `__var` becomes `_ClassName__var`) to make it harder to access outside its class.
        resources:
          - name: Python Name Mangling
            url: https://www.tutorialsteacher.com/python/name-mangling-in-python

      - id: py-encap-004
        prompt: What is the purpose of getter and setter methods?
        answer: To control access to private attributes and add validation logic when getting/setting values.
        resources:
          - name: Python Getters and Setters
            url: https://www.programiz.com/python-programming/property

      - id: py-encap-005
        prompt: What does the `@property` decorator do?
        answer: It allows you to define methods that can be accessed like attributes while maintaining control over the access.
        resources:
          - name: Python @property
            url: https://realpython.com/python-property/

      - id: py-encap-006
        prompt: How do you make a read-only property in Python?
        answer: By using the `@property` decorator without defining a setter method.
        resources:
          - name: Python Read-Only Properties
            url: https://www.pythontutorial.net/python-oop
  - topic: math-module
    questions:
      - id: py-math-001
        prompt: What is the purpose of the `math` module in Python?
        answer: The `math` module provides access to mathematical functions defined by the C standard.
        resources:
          - name: Python Math Module
            url: https://yasirbhutta.github.io/python/docs/modules/math.html

      - id: py-math-002
        prompt: How do you import the `math` module in Python?
        answer: You can import the `math` module using `import math`.
        resources:
          - name: Python Math Module
            url: https://yasirbhutta.github.io/python/docs/modules/math.html

      - id: py-math-003
        prompt: What is the difference between `math.floor()` and `math.ceil()`?
        answer: "`math.floor()` returns the largest integer less than or equal to the number, while `math.ceil()` returns the smallest integer greater than or equal to the number."
        resources:
          - name: Floor and Ceil Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#rounding

      - id: py-math-004
        prompt: What values do `math.pi` and `math.e` represent?
        answer: "`math.pi` represents the value of π (approximately 3.14159) and `math.e` represents Euler’s number (approximately 2.71828)."
        resources:
          - name: Constants in Math Module
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#constants

      - id: py-math-005
        prompt: What is the output of `print(math.tau)`?
        answer: It prints the value of τ (tau), which is 2π or approximately 6.28318.
        resources:
          - name: Constants in Math Module
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#constants

      - id: py-math-006
        prompt: What does `math.pow(x, y)` return, and how is it different from `x ** y`?
        answer: "`math.pow(x, y)` returns x raised to the power y as a float, while `x ** y` may return an int if both x and y are integers."
        resources:
          - name: Power and Logarithmic Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#power-logarithmic

      - id: py-math-007
        prompt: How do you compute the square root of a number using the `math` module?
        answer: Use `math.sqrt(x)` to compute the square root of x.
        resources:
          - name: Square Root
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#power-logarithmic

      - id: py-math-008
        prompt: What is the difference between `math.log(x)` and `math.log10(x)`?
        answer: "`math.log(x)` returns the natural logarithm (base e) of x, while `math.log10(x)` returns the base-10 logarithm of x."
        resources:
          - name: Logarithmic Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#power-logarithmic

      - id: py-math-009
        prompt: What is the output of `math.exp(2)`?
        answer: It returns e raised to the power 2, approximately 7.389.
        resources:
          - name: Exponential Function
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#power-logarithmic

      - id: py-math-010
        prompt: What is the output of `math.sin(math.pi / 2)`?
        answer: It returns 1.0.
        resources:
          - name: Trigonometric Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#trigonometric-functions

      - id: py-math-011
        prompt: Which function would you use to convert radians to degrees?
        answer: Use `math.degrees(x)` to convert radians to degrees.
        resources:
          - name: Angular Conversion
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#angular-conversion

      - id: py-math-013
        prompt: How do you convert 180 degrees to radians using the `math` module?
        answer: Use `math.radians(180)`, which returns π radians.
        resources:
          - name: Angular Conversion
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#angular-conversion

      - id: py-math-014
        prompt: What does `math.fabs(x)` do?
        answer: It returns the absolute value of x as a float.
        resources:
          - name: Special Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#special-functions

      - id: py-math-015
        prompt: When would you use `math.factorial(x)`?
        answer: When you need the factorial of a non-negative integer x.
        resources:
          - name: Special Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#special-functions

      - id: py-math-016
        prompt: What’s the result of `math.isqrt(10)`?
        answer: It returns the integer square root of 10, which is 3.
        resources:
          - name: Special Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#special-functions

      - id: py-math-017
        prompt: What does `math.isfinite(x)` check for?
        answer: It checks whether x is neither infinite nor NaN.
        resources:
          - name: "Python Math Module - isinf() vs isfinite() Explained"
            url: https://yasirbhutta.github.io/python/docs/math-module/isfinite-vs-isinf.html

      - id: py-math-018
        prompt: How is `math.isnan(x)` different from `math.isinf(x)`?
        answer: "`math.isnan(x)` checks if x is NaN, while `math.isinf(x)` checks if x is positive or negative infinity."
        resources:
          - name: "Python Math Module - isinf() vs isfinite() Explained"
            url: https://yasirbhutta.github.io/python/docs/math-module/isfinite-vs-isinf.html

      - id: py-math-020
        prompt: Write a Python function that returns the ceiling, floor, and rounded value of a float using the `math` module.
        answer: Use `math.ceil(x)`, `math.floor(x)`, and `round(x)` respectively.
        resources:
          - name: Rounding Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#rounding

      - id: py-math-021
        prompt: What will happen if you pass a negative number to `math.sqrt()`? How can you handle it?
        answer: It raises a `ValueError`. You can handle it using a `try-except` block or use the `cmath` module for complex results.
        resources:
          - name: Square Root Function
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#power-logarithmic

      - id: py-math-022
        prompt: "Identify and correct the error in the following code: `math.sqrt(-16)`"
        answer: The code raises a `ValueError` because the square root of a negative number is not defined in the real domain. Use `cmath.sqrt(-16)` instead.
        resources:
          - name: Square Root Function
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#power-logarithmic

  - topic: oop-inheritance
    questions:
      - id: py-rq-001
        prompt: What is inheritance in Python?
        answer: Inheritance in Python allows a class (child class) to inherit attributes and methods from another class (parent class), promoting code reusability and creating a hierarchical relationship between classes.
        resources:
          - name: Learn about Inheritance in Python
            url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html#inheritance

      - id: py-rq-002
        prompt: How does Python handle method resolution order (MRO) in the case of multiple inheritance?
        answer: Python uses the C3 Linearization algorithm to determine the method resolution order (MRO) when multiple inheritance is involved. This ensures that methods are called in a consistent order, from left to right in the class hierarchy.
        resources:
          - name: Learn about MRO in Python
            url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html#mro

      - id: py-rq-003
        prompt: What happens if a subclass does not override a method from the parent class?
        answer: If a subclass does not override a method, the child class inherits the method from the parent class and can use it as-is without any modification.
        resources:
          - name: Learn about Method Inheritance in Python
            url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html#method-inheritance

      - id: py-rq-004
        prompt: Why would you use the super() function in a subclass constructor?
        answer: The super() function is used in a subclass constructor to call the parent class's constructor (__init__), ensuring that the parent class’s attributes are initialized properly in the child class.
        resources:
          - name: Learn about super() function in Python
            url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html#super-function

      - id: py-rq-005
        prompt: Can a child class in Python access private attributes of the parent class?
        answer: No, private attributes in Python (those prefixed with __) are name-mangled and are not directly accessible in the child class or outside the parent class.
        resources:
          - name: Learn about Private Attributes in Python
            url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html#private-attributes

      - id: py-rq-006
        prompt: What is the difference between method overriding and method overloading in Python?
        answer: Method overriding occurs when a subclass provides a specific implementation of a method that is already defined in the parent class. Python does not support method overloading in the traditional sense, but method overloading can be simulated using default or variable-length arguments.
        resources:
          - name: Learn about Method Overriding in Python
            url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html#method-overriding

      - id: py-rq-007
        prompt: In the case of a class hierarchy, which of the following will be true about the child class's constructor (__init__ method)?
        answer: The parent class's constructor is not automatically called unless explicitly invoked using super(). If the child class defines its own constructor, it can call super().__init__() to invoke the parent class’s constructor and initialize the inherited attributes.
        resources:
          - name: Learn about Constructor Inheritance in Python
            url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html#constructor-inheritance

  - topic: strings
    questions:
      - id: py-str-001
        prompt: What is a string in Python?
        answer: >
          A string in Python is a sequence of characters enclosed within single, double, or triple quotes.
        difficulty: easy
        resources:
          - name: Python Strings Documentation
            url: https://yasirbhutta.github.io/python/docs/strings.html

      - id: py-str-002
        prompt: How can you access characters in a string?
        answer: >
          You can access characters in a string using indexing with square brackets. Indexing starts at 0 for the first character.
        difficulty: easy
        resources:
          - name: Python Strings Documentation
            url: https://yasirbhutta.github.io/python/docs/strings.html

      - id: py-str-003
        prompt: What is string slicing?
        answer: >
          String slicing is extracting a portion of a string using a colon syntax like [start:end], where 'start' is inclusive and 'end' is exclusive.
        difficulty: easy
        resources:
          - name: Python Strings Documentation
            url: https://yasirbhutta.github.io/python/docs/strings.html

      - id: py-str-004
        prompt: Name two string methods used for changing case.
        answer: >
          The `upper()` method converts a string to uppercase, while the `lower()` method converts it to lowercase.
        difficulty: easy
        resources:
          - name: Python Strings Documentation
            url: https://yasirbhutta.github.io/python/docs/strings.html

      - id: py-str-005
        prompt: How can you check if a substring exists within a string?
        answer: >
          You can use the `in` keyword to check if a substring exists in a string. For example, `'apple' in 'pineapple'` returns `True`.
        difficulty: easy
        resources:
          - name: Python Strings Documentation
            url: https://yasirbhutta.github.io/python/docs/strings.html

  - topic: lambda-functions
    questions:
      - id: py-rq-001
        prompt: What is a lambda function in Python?
        answer: A lambda function is a short, unnamed function in Python. It is used when you need a simple function for a short time. You write it using the `lambda` keyword, followed by inputs and a small action.
        resources:
          - name: Learn about Lambda Functions
            url: https://yasirbhutta.github.io/python/docs/lambda/index.html

      - id: py-rq-002
        prompt: How is a lambda function different from a regular function in Python?
        answer: A lambda function is written in one line and has no name. A regular function uses the `def` keyword and can have many lines of code. Lambdas are best for quick, simple tasks.
        resources:
          - name: Lambda vs Regular Functions
            url: https://yasirbhutta.github.io/python/docs/lambda/index.html

      - id: py-rq-003
        prompt: Can a lambda function have multiple statements?
        answer: No, a lambda function can only have one small action, not many steps. It is made for simple, single-line work only.
        resources:
          - name: Limitations of Lambda Functions
            url: https://yasirbhutta.github.io/python/docs/lambda/index.html

      - id: py-rq-004
        prompt: What is the syntax of a lambda function in Python?
        answer: "You write a lambda function like this: `lambda inputs: action`. It starts with the word `lambda`, then inputs, a colon, and one small action or calculation."
        resources:
          - name: Syntax of Lambda Functions
            url: https://yasirbhutta.github.io/python/docs/lambda/index.html

      - id: py-rq-005
        prompt: In which situations are lambda functions commonly used in Python?
        answer: Lambda functions are used when you need a simple function quickly. They are often used inside functions like `map()`, `filter()`, and `sorted()` to do small jobs.
        resources:
          - name: Use Cases for Lambda Functions
            url: https://yasirbhutta.github.io/python/docs/lambda/index.html
