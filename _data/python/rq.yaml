course: python
topics:
  - topic: if-elif-else
    questions:
      - id: cond-review-001
        prompt: "What is the purpose of the 'if' statement in Python?"
        answer: "The 'if' statement is used for conditional execution. It evaluates a condition and executes its block of code only if the condition is True."
        examples:
          - "Basic if: `if x > 0: print('Positive')`"
          - "With variable: `if logged_in: print('Welcome')`"
        resources:
          - name: "Python if Statements"
            url: "https://docs.python.org/3/tutorial/controlflow.html#if-statements"

      - id: cond-review-002
        prompt: "When should you use 'elif' instead of separate 'if' statements?"
        answer: "'elif' should be used when checking multiple exclusive conditions where only one block should execute. Separate 'if' statements check independently and multiple blocks could execute."
        examples:
          - "Good (exclusive): `if grade >= 90: ... elif grade >= 80: ...`"
          - "Bad (non-exclusive): `if x > 0: ... if x < 10: ...` (both could run)"
        resources:
          - name: "Python if-elif-else"
            url: "https://www.w3schools.com/python/python_conditions.asp"

      - id: cond-review-003
        prompt: "What is the purpose of the 'else' clause in conditionals?"
        answer: "The 'else' clause provides a default block of code that executes when all preceding 'if' and 'elif' conditions evaluate to False."
        examples:
          - "Basic else: `if x > 0: ... else: print('Not positive')`"
          - "After elif: `if x > 0: ... elif x < 0: ... else: print('Zero')`"
        resources:
          - name: "Python else Clause"
            url: "https://realpython.com/python-conditional-statements/"

      - id: cond-review-004
        prompt: "What is a nested conditional and when would you use one?"
        answer: "A nested conditional is an 'if' statement inside another 'if' statement. It's used when you need to check additional conditions only after a primary condition is met."
        examples:
          - "Basic nesting: `if x > 0: if x % 2 == 0: print('Positive even')`"
          - "Login system: `if user_exists: if password_correct: ...`"
        resources:
          - name: "Python Nested If"
            url: "https://www.programiz.com/python-programming/nested-if"

      - id: cond-review-005
        prompt: "How does Python determine which block to execute in an if-elif-else chain?"
        answer: "Python evaluates conditions from top to bottom. It executes the first block where the condition is True, skips all remaining conditions, and executes the 'else' block only if all conditions were False."
        examples:
          - "Order matters: `if x > 10: ... elif x > 5: ...` (second won't run if x=12)"
          - "Only one executes: `if True: ... elif True: ...` (second never reached)"
        resources:
          - name: "Conditional Execution Flow"
            url: "https://docs.python.org/3/reference/compound_stmts.html#if"

      - id: cond-review-006
        prompt: "What are some common mistakes beginners make with Python conditionals?"
        answer: |
          Common mistakes include:
          1. Forgetting colons after conditions
          2. Using assignment (=) instead of comparison (==)
          3. Incorrect indentation of blocks
          4. Over-nesting conditionals unnecessarily
          5. Not covering all possible cases
        examples:
          - "Syntax error: `if x > 0 print('Positive')` (missing colon)"
          - "Logical error: `if x = 5: ...` (assignment not comparison)"
        resources:
          - name: "Common Python Mistakes"
            url: "https://realpython.com/python-common-mistakes/"

      - id: cond-review-007
        prompt: "How can you test multiple conditions in a single 'if' statement?"
        answer: "Use logical operators: 'and' (both true), 'or' (either true), 'not' (inverse). Parentheses can group conditions for clarity and proper evaluation order."
        examples:
          - "AND: `if x > 0 and x < 10: ...`"
          - "OR: `if x == 'yes' or x == 'y': ...`"
          - "Combined: `if (x > 0 or y > 0) and not z: ...`"
        resources:
          - name: "Python Boolean Operations"
            url: "https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not"

  - topic: lists
    questions:
      - id: list-review-001
        prompt: "What is a list in Python and how is it created?"
        answer: "A list is an ordered, mutable collection of elements enclosed in square brackets []. Lists are created by placing comma-separated values between square brackets or using the list() constructor."
        examples:
          - "Empty list: `my_list = []` or `my_list = list()`"
          - "Number list: `numbers = [1, 2, 3]`"
          - "Mixed types: `mixed = [1, 'a', True, 3.14]`"
        resources:
          - name: "Python Lists Documentation"
            url: "https://docs.python.org/3/tutorial/introduction.html#lists"

      - id: list-review-002
        prompt: "How does Python list indexing work?"
        answer: "Python lists use zero-based indexing where the first element is at index 0. Negative indices count backward from the end (-1 is last element)."
        examples:
          - "First element: `my_list[0]`"
          - "Last element: `my_list[-1]`"
          - "Second last: `my_list[-2]`"
        resources:
          - name: "Python List Indexing"
            url: "https://realpython.com/python-lists-tuples/#list-elements-can-be-accessed-by-index"

      - id: list-review-003
        prompt: "What is list slicing and what is its syntax?"
        answer: "Slicing extracts a portion of a list using the syntax list[start:stop:step]. Start is inclusive, stop is exclusive, and step determines the interval."
        examples:
          - "First 3 elements: `my_list[0:3]` or `my_list[:3]`"
          - "Last 3 elements: `my_list[-3:]`"
          - "Every other element: `my_list[::2]`"
          - "Reverse: `my_list[::-1]`"
        resources:
          - name: "Python List Slicing"
            url: "https://www.geeksforgeeks.org/python-list-slicing/"

      - id: list-review-004
        prompt: "What are the key differences between append(), extend(), and insert() methods?"
        answer: |
          - append(): Adds a single element to the end
          - extend(): Adds all elements from an iterable to the end
          - insert(): Adds an element at a specific position
        examples:
          - "append: `my_list.append(4)`"
          - "extend: `my_list.extend([4, 5])`"
          - "insert: `my_list.insert(1, 'new')`"
        resources:
          - name: "Python List Methods"
            url: "https://www.w3schools.com/python/python_ref_list.asp"

      - id: list-review-005
        prompt: "How do you remove elements from a list in Python?"
        answer: |
          Common removal methods:
          - remove(): Removes first matching value
          - pop(): Removes item at given index (default last)
          - del: Deletes item(s) by index/slice
          - clear(): Empties entire list
        examples:
          - "remove: `my_list.remove('a')`"
          - "pop: `my_list.pop(1)`"
          - "del: `del my_list[0:2]`"
          - "clear: `my_list.clear()`"
        resources:
          - name: "Removing List Items"
            url: "https://www.programiz.com/python-programming/methods/list/remove"

  - topic: variables
    questions:
      - id: var-review-001
        prompt: "What is a variable in computer programming?"
        answer: "A variable is a named storage location in a computer's memory that is used to hold data or values. It allows programmers to store and manipulate data within a program."
        examples:
          - "integer: `age = 25`"
          - "string: `name = 'Alice'`"
          - "float: `price = 19.99`"
          - "boolean: `is_active = True`"
        resources:
          - name: "Python Variables"
            url: "https://yasirbhutta.github.io/python/docs/variables/variables-basics.html#1-what-are-variables"

      - id: var-review-002
        prompt: "What is the purpose of using variables in programming?"
        answer: "Variables provide a way to store and manage data that can be used and manipulated throughout a program. They make programs more flexible and allow for dynamic data storage."
        resources:
          - name: "Why Use Variables"
            url: "https://yasirbhutta.github.io/python/docs/variables/variables-basics.html"

      - id: var-review-003
        prompt: "What is the difference between declaring and initializing a variable?"
        answer: "Declaring a variable involves specifying its name, while initializing means giving it an initial value. In Python, declaration and initialization happen simultaneously. Python is dynamically typed, so explicit type declaration isn't required."
        example:
          code: |
            # Declaration and initialization in Python:
            count = 10  # Integer
            message = "Hello"  # String
        resources:
          - name: "Variable Declaration"
            url: "https://yasirbhutta.github.io/python/docs/variables/variables-basics.html"

  - topic: oop-encapsulation
    questions:
      - id: py-encap-001
        prompt: What is the main purpose of encapsulation in Python?
        answer: To protect an object's internal state from direct external access and modification.
        resources:
          - name: Python Encapsulation
            url: https://www.geeksforgeeks.org/encapsulation-in-python/

      - id: py-encap-002
        prompt: What does a single underscore prefix (e.g., `_variable`) indicate in Python?
        answer: It indicates a protected variable that should only be accessed within the class or its subclasses (convention only).
        resources:
          - name: Python Naming Conventions
            url: https://peps.python.org/pep-0008/#method-names-and-instance-variables

      - id: py-encap-003
        prompt: What is name mangling in Python?
        answer: When Python changes a variable name (e.g., `__var` becomes `_ClassName__var`) to make it harder to access outside its class.
        resources:
          - name: Python Name Mangling
            url: https://www.tutorialsteacher.com/python/name-mangling-in-python

      - id: py-encap-004
        prompt: What is the purpose of getter and setter methods?
        answer: To control access to private attributes and add validation logic when getting/setting values.
        resources:
          - name: Python Getters and Setters
            url: https://www.programiz.com/python-programming/property

      - id: py-encap-005
        prompt: What does the `@property` decorator do?
        answer: It allows you to define methods that can be accessed like attributes while maintaining control over the access.
        resources:
          - name: Python @property
            url: https://realpython.com/python-property/

      - id: py-encap-006
        prompt: How do you make a read-only property in Python?
        answer: By using the `@property` decorator without defining a setter method.
        resources:
          - name: Python Read-Only Properties
            url: https://www.pythontutorial.net/python-oop
  - topic: math-module
    questions:
      - id: py-math-001
        prompt: What is the purpose of the `math` module in Python?
        answer: The `math` module provides access to mathematical functions defined by the C standard.
        resources:
          - name: Python Math Module
            url: https://yasirbhutta.github.io/python/docs/modules/math.html

      - id: py-math-002
        prompt: How do you import the `math` module in Python?
        answer: You can import the `math` module using `import math`.
        resources:
          - name: Python Math Module
            url: https://yasirbhutta.github.io/python/docs/modules/math.html

      - id: py-math-003
        prompt: What is the difference between `math.floor()` and `math.ceil()`?
        answer: "`math.floor()` returns the largest integer less than or equal to the number, while `math.ceil()` returns the smallest integer greater than or equal to the number."
        resources:
          - name: Floor and Ceil Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#rounding

      - id: py-math-004
        prompt: What values do `math.pi` and `math.e` represent?
        answer: "`math.pi` represents the value of π (approximately 3.14159) and `math.e` represents Euler’s number (approximately 2.71828)."
        resources:
          - name: Constants in Math Module
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#constants

      - id: py-math-005
        prompt: What is the output of `print(math.tau)`?
        answer: It prints the value of τ (tau), which is 2π or approximately 6.28318.
        resources:
          - name: Constants in Math Module
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#constants

      - id: py-math-006
        prompt: What does `math.pow(x, y)` return, and how is it different from `x ** y`?
        answer: "`math.pow(x, y)` returns x raised to the power y as a float, while `x ** y` may return an int if both x and y are integers."
        resources:
          - name: Power and Logarithmic Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#power-logarithmic

      - id: py-math-007
        prompt: How do you compute the square root of a number using the `math` module?
        answer: Use `math.sqrt(x)` to compute the square root of x.
        resources:
          - name: Square Root
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#power-logarithmic

      - id: py-math-008
        prompt: What is the difference between `math.log(x)` and `math.log10(x)`?
        answer: "`math.log(x)` returns the natural logarithm (base e) of x, while `math.log10(x)` returns the base-10 logarithm of x."
        resources:
          - name: Logarithmic Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#power-logarithmic

      - id: py-math-009
        prompt: What is the output of `math.exp(2)`?
        answer: It returns e raised to the power 2, approximately 7.389.
        resources:
          - name: Exponential Function
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#power-logarithmic

      - id: py-math-010
        prompt: What is the output of `math.sin(math.pi / 2)`?
        answer: It returns 1.0.
        resources:
          - name: Trigonometric Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#trigonometric-functions

      - id: py-math-011
        prompt: Which function would you use to convert radians to degrees?
        answer: Use `math.degrees(x)` to convert radians to degrees.
        resources:
          - name: Angular Conversion
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#angular-conversion

      - id: py-math-013
        prompt: How do you convert 180 degrees to radians using the `math` module?
        answer: Use `math.radians(180)`, which returns π radians.
        resources:
          - name: Angular Conversion
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#angular-conversion

      - id: py-math-014
        prompt: What does `math.fabs(x)` do?
        answer: It returns the absolute value of x as a float.
        resources:
          - name: Special Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#special-functions

      - id: py-math-015
        prompt: When would you use `math.factorial(x)`?
        answer: When you need the factorial of a non-negative integer x.
        resources:
          - name: Special Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#special-functions

      - id: py-math-016
        prompt: What’s the result of `math.isqrt(10)`?
        answer: It returns the integer square root of 10, which is 3.
        resources:
          - name: Special Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#special-functions

      - id: py-math-017
        prompt: What does `math.isfinite(x)` check for?
        answer: It checks whether x is neither infinite nor NaN.
        resources:
          - name: "Python Math Module - isinf() vs isfinite() Explained"
            url: https://yasirbhutta.github.io/python/docs/math-module/isfinite-vs-isinf.html

      - id: py-math-018
        prompt: How is `math.isnan(x)` different from `math.isinf(x)`?
        answer: "`math.isnan(x)` checks if x is NaN, while `math.isinf(x)` checks if x is positive or negative infinity."
        resources:
          - name: "Python Math Module - isinf() vs isfinite() Explained"
            url: https://yasirbhutta.github.io/python/docs/math-module/isfinite-vs-isinf.html

      - id: py-math-020
        prompt: Write a Python function that returns the ceiling, floor, and rounded value of a float using the `math` module.
        answer: Use `math.ceil(x)`, `math.floor(x)`, and `round(x)` respectively.
        resources:
          - name: Rounding Functions
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#rounding

      - id: py-math-021
        prompt: What will happen if you pass a negative number to `math.sqrt()`? How can you handle it?
        answer: It raises a `ValueError`. You can handle it using a `try-except` block or use the `cmath` module for complex results.
        resources:
          - name: Square Root Function
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#power-logarithmic

      - id: py-math-022
        prompt: "Identify and correct the error in the following code: `math.sqrt(-16)`"
        answer: The code raises a `ValueError` because the square root of a negative number is not defined in the real domain. Use `cmath.sqrt(-16)` instead.
        resources:
          - name: Square Root Function
            url: https://yasirbhutta.github.io/python/docs/modules/math.html#power-logarithmic

  - topic: oop-inheritance
    questions:
      - id: py-rq-001
        prompt: What is inheritance in Python?
        answer: Inheritance in Python allows a class (child class) to inherit attributes and methods from another class (parent class), promoting code reusability and creating a hierarchical relationship between classes.
        resources:
          - name: Learn about Inheritance in Python
            url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html#inheritance

      - id: py-rq-002
        prompt: How does Python handle method resolution order (MRO) in the case of multiple inheritance?
        answer: Python uses the C3 Linearization algorithm to determine the method resolution order (MRO) when multiple inheritance is involved. This ensures that methods are called in a consistent order, from left to right in the class hierarchy.
        resources:
          - name: Learn about MRO in Python
            url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html#mro

      - id: py-rq-003
        prompt: What happens if a subclass does not override a method from the parent class?
        answer: If a subclass does not override a method, the child class inherits the method from the parent class and can use it as-is without any modification.
        resources:
          - name: Learn about Method Inheritance in Python
            url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html#method-inheritance

      - id: py-rq-004
        prompt: Why would you use the super() function in a subclass constructor?
        answer: The super() function is used in a subclass constructor to call the parent class's constructor (__init__), ensuring that the parent class’s attributes are initialized properly in the child class.
        resources:
          - name: Learn about super() function in Python
            url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html#super-function

      - id: py-rq-005
        prompt: Can a child class in Python access private attributes of the parent class?
        answer: No, private attributes in Python (those prefixed with __) are name-mangled and are not directly accessible in the child class or outside the parent class.
        resources:
          - name: Learn about Private Attributes in Python
            url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html#private-attributes

      - id: py-rq-006
        prompt: What is the difference between method overriding and method overloading in Python?
        answer: Method overriding occurs when a subclass provides a specific implementation of a method that is already defined in the parent class. Python does not support method overloading in the traditional sense, but method overloading can be simulated using default or variable-length arguments.
        resources:
          - name: Learn about Method Overriding in Python
            url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html#method-overriding

      - id: py-rq-007
        prompt: In the case of a class hierarchy, which of the following will be true about the child class's constructor (__init__ method)?
        answer: The parent class's constructor is not automatically called unless explicitly invoked using super(). If the child class defines its own constructor, it can call super().__init__() to invoke the parent class’s constructor and initialize the inherited attributes.
        resources:
          - name: Learn about Constructor Inheritance in Python
            url: https://yasirbhutta.github.io/python/docs/oop-inheritance.html#constructor-inheritance

  - topic: strings
    questions:
      - id: py-str-001
        prompt: What is a string in Python?
        answer: >
          A string in Python is a sequence of characters enclosed within single, double, or triple quotes.
        difficulty: easy
        resources:
          - name: Python Strings Documentation
            url: https://yasirbhutta.github.io/python/docs/strings.html

      - id: py-str-002
        prompt: How can you access characters in a string?
        answer: >
          You can access characters in a string using indexing with square brackets. Indexing starts at 0 for the first character.
        difficulty: easy
        resources:
          - name: Python Strings Documentation
            url: https://yasirbhutta.github.io/python/docs/strings.html

      - id: py-str-003
        prompt: What is string slicing?
        answer: >
          String slicing is extracting a portion of a string using a colon syntax like [start:end], where 'start' is inclusive and 'end' is exclusive.
        difficulty: easy
        resources:
          - name: Python Strings Documentation
            url: https://yasirbhutta.github.io/python/docs/strings.html

      - id: py-str-004
        prompt: Name two string methods used for changing case.
        answer: >
          The `upper()` method converts a string to uppercase, while the `lower()` method converts it to lowercase.
        difficulty: easy
        resources:
          - name: Python Strings Documentation
            url: https://yasirbhutta.github.io/python/docs/strings.html

      - id: py-str-005
        prompt: How can you check if a substring exists within a string?
        answer: >
          You can use the `in` keyword to check if a substring exists in a string. For example, `'apple' in 'pineapple'` returns `True`.
        difficulty: easy
        resources:
          - name: Python Strings Documentation
            url: https://yasirbhutta.github.io/python/docs/strings.html

  - topic: lambda-functions
    questions:
      - id: py-rq-001
        prompt: What is a lambda function in Python?
        answer: A lambda function is a short, unnamed function in Python. It is used when you need a simple function for a short time. You write it using the `lambda` keyword, followed by inputs and a small action.
        resources:
          - name: Learn about Lambda Functions
            url: https://yasirbhutta.github.io/python/docs/lambda/index.html

      - id: py-rq-002
        prompt: How is a lambda function different from a regular function in Python?
        answer: A lambda function is written in one line and has no name. A regular function uses the `def` keyword and can have many lines of code. Lambdas are best for quick, simple tasks.
        resources:
          - name: Lambda vs Regular Functions
            url: https://yasirbhutta.github.io/python/docs/lambda/index.html

      - id: py-rq-003
        prompt: Can a lambda function have multiple statements?
        answer: No, a lambda function can only have one small action, not many steps. It is made for simple, single-line work only.
        resources:
          - name: Limitations of Lambda Functions
            url: https://yasirbhutta.github.io/python/docs/lambda/index.html

      - id: py-rq-004
        prompt: What is the syntax of a lambda function in Python?
        answer: "You write a lambda function like this: `lambda inputs: action`. It starts with the word `lambda`, then inputs, a colon, and one small action or calculation."
        resources:
          - name: Syntax of Lambda Functions
            url: https://yasirbhutta.github.io/python/docs/lambda/index.html

      - id: py-rq-005
        prompt: In which situations are lambda functions commonly used in Python?
        answer: Lambda functions are used when you need a simple function quickly. They are often used inside functions like `map()`, `filter()`, and `sorted()` to do small jobs.
        resources:
          - name: Use Cases for Lambda Functions
            url: https://yasirbhutta.github.io/python/docs/lambda/index.html
