questions:
  - id: "py001"
    category: "oop-inheritance"
    difficulty: "easy"
    question: "What is the main purpose of inheritance in Python?"
    options:
      - "To create multiple objects of a class"
      - "To reuse code and extend functionality"
      - "To define private methods in a class"
      - "To create a new programming paradigm"
    answer: "To reuse code and extend functionality"
    explanation: "Inheritance allows code reuse and method overriding in child classes."
  - id: "py002"
    category: "oop-inheritance"
    difficulty: "easy"
    question: "What is the main purpose of inheritance in Python?"
    options:
      - "To create multiple objects of a class"
      - "To reuse code and extend functionality"
      - "To define private methods in a class"
      - "To create a new programming paradigm"
    answer: "To reuse code and extend functionality"
    explanation: "Inheritance in Python enables code reuse by allowing child classes to inherit attributes and methods from parent classes. It also allows child classes to override or extend functionality."

  - id: "py003"
    category: "oop-inheritance"
    difficulty: "easy"
    question: "Which of the following is the correct syntax for inheritance in Python?"
    options:
      - "class Child inherits Parent:"
      - "class Child(Parent):"
      - "class Parent -> Child:"
      - "class Parent(Child):"
    answer: "class Child(Parent):"
    explanation: "In Python, a child class is defined using the syntax `class Child(Parent):`, where `Child` inherits from `Parent`."

  - id: "py004"
    category: "oop-inheritance"
    difficulty: "easy"
    question: "What does the `super()` function do in Python?"
    options:
      - "It creates a new class."
      - "It calls a method from the parent class."
      - "It initializes an object."
      - "It defines a private method."
    answer: "It calls a method from the parent class."
    explanation: "The `super()` function is used to call methods from a parent class within a child class, often used in constructors and method overrides."

  - id: "py005"
    category: "oop-inheritance"
    difficulty: "easy"
    question: "Which of the following statements is true about method overriding?"
    options:
      - "The child class must use the `super()` function to override a method."
      - "The child class can redefine a method from the parent class with the same name."
      - "Method overriding is not allowed in Python."
      - "Overridden methods in the child class must have different names."
    answer: "The child class can redefine a method from the parent class with the same name."
    explanation: "In method overriding, the child class provides its own implementation of a method that is already defined in its parent class."

  - id: "py006"
    category: "oop-inheritance"
    difficulty: "easy"
    question: "What is the purpose of multilevel inheritance?"
    options:
      - "To allow a class to inherit from multiple parent classes."
      - "To create a chain of inheritance where a class inherits from another class, which in turn inherits from another class."
      - "To define private methods in a class."
      - "To prevent method overriding."
    answer: "To create a chain of inheritance where a class inherits from another class, which in turn inherits from another class."
    explanation: "Multilevel inheritance allows a class to inherit from a class that itself inherits from another class, forming an inheritance chain."