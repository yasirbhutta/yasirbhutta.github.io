course: python
topics:
  - topic: loops-while
    exercises:
      - id: py-ce-wl-001
        title: "Age and Exercise Input Validation"
        task: |
          Create a program that:
          1. Validates age input (must be positive number)
          2. Gets user's name
          3. Validates exercise preference (only accepts Y/N)
          4. Prints all collected information
        requirements: |
          - Use `while True` loops for input validation
          - For age: reject non-numeric and non-positive values
          - For exercise preference: accept only Y or N (case insensitive)
          - Display formatted output with name and age
          - Handle all edge cases (empty input, wrong types, etc.)
        input: |
          (Program should handle console input interactively)
          Example test sequence:
          Enter your age: abc
          Enter your age: -5
          Enter your age: 25
          Enter your name: Alice
          Do you like to exercise? (Y/N): maybe
          Do you like to exercise? (Y/N): N
        output: |
          Your name is Alice and you are 25 years old.

          Nice
        resource:
          name: "Python Input Validation"
          url: "https://example.com/python-input-validation"
        difficulty: "easy"

  - topic: oop-encapsulation
    exercises:
      - id: py-ce-001
        title: "Protected Attributes"
        task: |
          Create a `BankAccount` class with a protected `_balance` attribute.
          Implement methods to deposit and withdraw money with basic validation.
        requirements: |
          - Use single underscore convention for protected attribute
          - Prevent negative balance withdrawals
          - Include a method to display current balance
        input: |
          account = BankAccount(100)
          account.deposit(50)
          account.withdraw(30)
          account.display_balance()
        output: |
          Current balance: 120
        resource:
          name: "Protected Attributes Tutorial"
          url: "https://example.com/protected-attributes"
        difficulty: "easy"

      - id: py-ce-002
        title: "Private Attributes with Getters/Setters"
        task: |
          Create a `Person` class with private `__age` attribute.
          Implement proper getter and setter methods with age validation.
        requirements: |
          - Use double underscores for private attribute
          - Setter should reject ages < 0 or > 120
          - Getter should return age with "years" suffix
        input: |
          person = Person()
          person.set_age(25)
          print(person.get_age())
          person.set_age(150)
        output: |
          25 years
          Invalid age!
        resource:
          name: "Private Attributes Guide"
          url: "https://example.com/private-attributes"
        difficulty: "easy"

      - id: py-ce-003
        title: "Property Decorators"
        task: |
          Create a `Temperature` class that uses @property to control access to celsius value.
          Add validation to prevent temperatures below absolute zero (-273.15°C).
        requirements: |
          - Use @property for getter
          - Use @temperature.setter for setter
          - Raise ValueError for invalid temperatures
        input: |
          temp = Temperature()
          temp.celsius = 25
          print(temp.celsius)
          temp.celsius = -300
        output: |
          25
          ValueError: Temperature below absolute zero!
        resource:
          name: "Property Decorators Explained"
          url: "https://example.com/property-decorators"
        difficulty: "medium"

      - id: py-ce-004
        title: "Read-Only Property"
        task: |
          Create a `Circle` class with private `__radius` and read-only `area` property.
          The area should be calculated when accessed but not modifiable directly.
        requirements: |
          - Use private attribute for radius
          - Implement area as read-only property
          - Area calculation: πr² (use math.pi)
        input: |
          circle = Circle(5)
          print(circle.area)
          circle.area = 100
        output: |
          78.53981633974483
          AttributeError: can't set attribute
        resource:
          name: "Read-Only Properties"
          url: "https://example.com/readonly-properties"
        difficulty: "medium"

      - id: py-ce-005
        title: "Full Encapsulation Example"
        task: |
          Create a `Student` class that fully encapsulates student data:
          - Private name (validated to be non-empty)
          - Private grades list (with methods to add grades and calculate average)
        requirements: |
          - Use double underscore for private attributes
          - Implement proper getters/setters
          - Add method to calculate grade average
          - Prevent direct modification of grades list
        input: |
          student = Student("Alice")
          student.add_grade(90)
          student.add_grade(85)
          print(student.get_name())
          print(student.get_average())
        output: |
          Alice
          87.5
        resource:
          name: "Complete Encapsulation"
          url: "https://example.com/full-encapsulation"
        difficulty: "medium"

  - topic: oop-inheritance
    exercises:
      - id: py-ce-001
        title: "Basic Inheritance"
        task: |
          Create a `Vehicle` class with attributes like `brand` and `year`. Then, create a `Car` class that inherits from `Vehicle` and adds an additional attribute `model`.
        requirements: |
          - Define a method in the `Vehicle` class that prints basic vehicle details.
          - Override this method in the `Car` class to print additional details (e.g., model).
        input: |
          car = Car("Toyota", 2022, "Corolla")
          car.display_info()
        output: |
          Brand: Toyota, Year: 2022
          Model: Corolla
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-001"
        difficulty: "easy"

      - id: py-ce-002
        title: "Method Overriding"
        task: |
          Create a `Person` class with a method `greet()`. Then, create a `Student` class that inherits from `Person` and overrides the `greet()` method to display a custom greeting message.
        requirements: |
          - The `Person` class should have a `name` attribute.
          - The `Student` class should override the `greet()` method to say "Hello, I am [name], a student".
        input: |
          student = Student("Alice")
          student.greet()
        output: |
          Hello, I am Alice, a student.
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-002"
        difficulty: "easy"

      - id: py-ce-003
        title: "Using `super()` in Inheritance"
        task: |
          Create a `Shape` class with a method `area()` that returns `None`. Then, create a `Rectangle` class that inherits from `Shape` and calculates the area of the rectangle using the length and width. Use `super()` to call the `Shape` constructor.
        requirements: |
          - The `Rectangle` class should accept `length` and `width` as arguments.
          - The `area()` method in `Rectangle` should calculate and print the area of the rectangle.
        input: |
          rectangle = Rectangle(5, 3)
          print(f"Area of rectangle: {rectangle.area()}")
        output: |
          Area of rectangle: 15
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-003"
        difficulty: "easy"

      - id: py-ce-004
        title: "Multilevel Inheritance"
        task: |
          Create a class `Animal` with a method `sound()`. Then, create a `Dog` class that inherits from `Animal` and overrides the `sound()` method. Afterward, create a `Puppy` class that inherits from `Dog` and adds a new method `play()`.
        requirements: |
          - The `sound()` method should print a generic animal sound in the `Animal` class.
          - The `Puppy` class should print a playful message in the `play()` method.
        input: |
          puppy = Puppy()
          puppy.sound()  # Inherited from Dog
          puppy.play()   # Specific to Puppy
        output: |
          Bark!
          Puppy is playing!
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-004"
        difficulty: "easy"

      - id: py-ce-005
        title: "Hierarchical Inheritance"
        task: |
          Create a `Person` class with a method `info()` to display basic information. Then, create two classes `Employee` and `Student` that inherit from `Person` and override the `info()` method to show their specific details.
        requirements: |
          - The `Employee` class should display "Employee [name], [age], [position]".
          - The `Student` class should display "Student [name], [age], [major]".
        input: |
          emp = Employee("John", 30, "Software Engineer")
          emp.info()

          stu = Student("Jane", 20, "Computer Science")
          stu.info()
        output: |
          Employee John, Age: 30, Position: Software Engineer
          Student Jane, Age: 20, Major: Computer Science
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-005"
        difficulty: "easy"

      - id: py-ce-006
        title: "Dynamic Method Resolution Order (MRO)"
        task: |
          Create a `Bird` class, a `FlyingBird` class, and a `Penguin` class. The `Penguin` class should inherit from `Bird` and override the `fly()` method to indicate that penguins can't fly.
        requirements: |
          - Use the `super()` function to call methods from the `Bird` class, demonstrating method resolution order (MRO).
        input: |
          bird = Bird()
          bird.fly()

          flying_bird = FlyingBird()
          flying_bird.fly()

          penguin = Penguin()
          penguin.fly()
        output: |
          Bird is flying.
          Flying bird is soaring high.
          Penguins cannot fly.
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-006"
        difficulty: "easy"

  - topic: strings
    exercises:
      - id: py-str-001
        title: "String Information"
        task: |
          Ask the user for their name and print:
          - The name in all uppercase
          - The name in all lowercase
          - The number of characters in the name
        requirements: |
          - Use `input()`, `upper()`, `lower()`, and `len()`
        input: |
          name = input("Enter your name: ")
        output: |
          Uppercase: JOHN
          Lowercase: john
          Length: 4
        difficulty: "easy"

      - id: py-str-002
        title: "Remove Extra Spaces"
        task: |
          Given a string with leading and trailing spaces, remove them and print the cleaned sentence.
        requirements: |
          - Use the `strip()` method.
        input: |
          sentence = "   Python is fun!   "
        output: |
          Cleaned Sentence: Python is fun!
        difficulty: "easy"

      - id: py-str-003
        title: "String Alignment"
        task: |
          Align the word "Code" within a 20-character width using different alignments.
        requirements: |
          - Use `center()`, `ljust()`, and `rjust()`
        input: |
          word = "Code"
        output: |
          Centered :        Code        
          Left     : Code               
          Right    :               Code
        difficulty: "easy"

      - id: py-str-004
        title: "String Slicing"
        task: |
          Perform slicing on the string "Python Programming":
          - Extract and print the first 6 characters
          - Extract and print the last 11 characters
          - Extract and print characters from index 7 to 17
        requirements: |
          - Use slicing syntax with `[]`
        input: |
          text = "Python Programming"
        output: |
          First 6 characters: Python
          Last 11 characters: Programming
          Characters 7 to 17: Programming
        difficulty: "easy"

      - id: py-str-005
        title: "String Formatting"
        task: |
          Given name and age variables, print: "My name is Alice and I am 30 years old."
        requirements: |
          - Use f-strings or `format()` for string formatting.
        input: |
          name = "Alice"
          age = 30
        output: |
          My name is Alice and I am 30 years old.
        difficulty: "easy"
  - topic: lambda
    exercises:
      - id: py-lf-001
        title: "Reverse a String"
        task: |
          Create a lambda function to reverse a string.
        input: |
          "hello"
        output: |
          "olleh"
        difficulty: "medium"

      - id: py-lf-002
        title: "Check Substring"
        task: |
          Create a lambda function that returns `True` if a substring exists in a string.
        input: |
          "world", "hello world"
        output: |
          True
        difficulty: "medium"

      - id: py-lf-003
        title: "Calculate Rectangle Area"
        task: |
          Create a lambda function to calculate the area of a rectangle.
        input: |
          4, 7
        output: |
          28
        difficulty: "easy"

      - id: py-lf-004
        title: "Square List Elements (with `map`)"
        task: |
          Use a lambda with `map` to square each element in a list.
        input: |
          [1, 2, 3, 4]
        output: |
          [1, 4, 9, 16]
        difficulty: "hard"

      - id: py-lf-005
        title: "Filter Even Numbers (with `filter`)"
        task: |
          Use a lambda with `filter` to extract even numbers from a list.
        input: |
          [1, 2, 3, 4, 5, 6]
        output: |
          [2, 4, 6]
        difficulty: "hard"

      - id: py-lf-006
        title: "Maximum of Two Numbers"
        task: |
          Create a lambda function to return the maximum of two numbers.
        input: |
          8, 12
        output: |
          12
        difficulty: "medium"

      - id: py-lf-007
        title: "Uppercase Conversion"
        task: |
          Create a lambda function to convert a string to uppercase.
        input: |
          "lambda"
        output: |
          "LAMBDA"
        difficulty: "medium"

      - id: py-lf-008
        title: "Combine Strings"
        task: |
          Create a lambda function to concatenate two strings with a space.
        input: |
          "Hello", "World"
        output: |
          "Hello World"
        difficulty: "easy"

      - id: py-lf-009
        title: "Check Palindrome"
        task: |
          Create a lambda function to check if a string is a palindrome.
        input: |
          "madam"
        output: |
          True
        difficulty: "medium"
