course: python
topics:
  - topic: sets
    questions:
      - id: py-ce-sets-001
        title: "Unique Elements Filter"
        task: |
          Write a function that takes a list and returns a new list containing only unique elements using sets.
        requirements:
          - "Use a set to remove duplicates"
          - "Return the result as a list"
          - "Preserve original order of first occurrences"
        input: |
          [3, 1, 2, 2, 4, 3, 5]
        output: |
          [3, 1, 2, 4, 5]
        difficulty: "easy"
        hint: "Convert to set and back to list, but order won't be preserved. Find another approach."
        resource:
          name: "Python Sets Documentation"
          url: "https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset"

      - id: py-ce-sets-002
        title: "Common Elements Finder"
        task: |
          Write a function that finds common elements between two lists using sets.
        requirements:
          - "Return the common elements as a set"
          - "Handle empty lists"
          - "Case sensitive comparison"
        input: |
          [1, 2, 3, 4]
          [3, 4, 5, 6]
        output: |
          {3, 4}
        difficulty: "easy"
        hint: "Use set intersection operation"
        resource:
          name: "Python Set Operations"
          url: "https://realpython.com/python-sets/"

      - id: py-ce-sets-003
        title: "Set Operations Calculator"
        task: |
          Create a program that performs union, intersection, and difference operations on two sets.
        requirements:
          - "Take two sets as input"
          - "Print all three operations results"
          - "Format output clearly"
        input: |
          {1, 2, 3}
          {3, 4, 5}
        output: |
          Union: {1, 2, 3, 4, 5}
          Intersection: {3}
          Difference (A-B): {1, 2}
        difficulty: "medium"
        hint: "Use |, &, and - operators"
        resource:
          name: "Set Operations Video"
          url: "https://www.youtube.com/watch?v=sBvaPopWOmQ"

      - id: py-ce-sets-004
        title: "Set Comprehension Challenge"
        task: |
          Use set comprehension to create a set of all vowels found in a given string.
        requirements:
          - "Use single line set comprehension"
          - "Case insensitive matching"
          - "Return only unique vowels"
        input: |
          "Hello World! Programming is fun!"
        output: |
          {'e', 'o', 'i', 'u', 'a'}
        difficulty: "medium"
        hint: "Convert string to lowercase first"
        resource:
          name: "Set Comprehension Tutorial"
          url: "https://www.datacamp.com/tutorial/python-set-comprehension"

      - id: py-ce-sets-005
        title: "FrozenSet Dictionary Keys"
        task: |
          Create a dictionary where keys are frozensets and values are their string representations.
        requirements:
          - "Create at least 3 frozenset keys"
          - "Handle empty frozenset"
          - "Demonstrate dictionary lookup"
        input: |
          (no input, program creates data)
        output: |
          {frozenset({1, 2}): 'frozenset({1, 2})', frozenset(): 'frozenset()'}
        difficulty: "hard"
        hint: "Regular sets can't be dictionary keys"
        resource:
          name: "FrozenSet Documentation"
          url: "https://docs.python.org/3/library/stdtypes.html#frozenset"

      - id: py-ce-sets-006
        title: "Set Symmetric Difference"
        task: |
          Write a function that returns elements present in exactly one of three sets.
        requirements:
          - "Handle three input sets"
          - "Use symmetric difference operation"
          - "Return result as sorted list"
        input: |
          {1, 2, 3, 4}
          {3, 4, 5, 6}
          {4, 6, 7, 8}
        output: |
          [1, 2, 5, 7, 8]
        difficulty: "hard"
        hint: "Combine multiple symmetric differences"
        resource:
          name: "Advanced Set Operations"
          url: "https://www.geeksforgeeks.org/python-set-operations/"


  - topic: loop-control-statements
    questions:


      - id: py-ce-while-008
        title: "Infinite Loop with Break"
        task: |
          Create a loop that runs infinitely until the user types "stop".
        requirements:
          - "Use while True"
          - "Break on 'stop' input"
          - "Case insensitive check"
        input: |
          hello
          world
          STOP
        output: "(program exits)"
        difficulty: "medium"
        hint: "Use lower() or upper() for case insensitivity"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://www.youtube.com/watch?v=33n-lb1Ujp4"


  - topic: loops-while
    exercises:
      - id: py-ce-while-001
        title: "Print Numbers from 1 to 10"
        task: |
          Write a `while` loop to print numbers from 1 to 10.
        requirements:
          - "Use a while loop"
          - "Print numbers 1 through 10 inclusive"
        input: ""
        output: "1 2 3 4 5 6 7 8 9 10"
        difficulty: "easy"
        hint: "Initialize counter before loop, increment it inside loop"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://www.youtube.com/watch?v=33n-lb1Ujp4"

      - id: py-ce-while-002
        title: "Sum of First N Natural Numbers"
        task: |
          Write a program that asks the user for a number `n` and calculates the sum of numbers from 1 to `n` using a `while` loop.
        requirements:
          - "Use while loop"
          - "Handle user input"
          - "Calculate correct sum"
        input: "5"
        output: "15"
        difficulty: "easy"
        hint: "Initialize sum to 0 before loop, add each number in sequence"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://www.youtube.com/watch?v=33n-lb1Ujp4"

      - id: py-ce-while-003
        title: "Multiplication Table"
        task: |
          Write a program to print the multiplication table of a given number using a `while` loop.
        requirements:
          - "Use while loop"
          - "Print table up to 10"
          - "Format as 'num x i = result'"
        input: "5"
        output: |
          5 x 1 = 5
          5 x 2 = 10
          ...
          5 x 10 = 50
        difficulty: "easy"
        hint: "Loop from 1 to 10, multiply input number by counter"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://www.youtube.com/watch?v=33n-lb1Ujp4"

      - id: py-ce-while-004
        title: "Reverse a Number"
        task: |
          Ask the user to enter a number and print its reverse using a `while` loop.
        requirements:
          - "Use while loop"
          - "Handle multi-digit numbers"
          - "Properly reverse digits"
        input: "1234"
        output: "4321"
        difficulty: "medium"
        hint: "Use modulo and integer division to extract digits"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://www.youtube.com/watch?v=33n-lb1Ujp4"

      - id: py-ce-while-005
        title: "Count Digits in a Number"
        task: |
          Write a program to count the number of digits in a given number using a `while` loop.
        requirements:
          - "Use while loop"
          - "Handle all positive integers"
          - "Count digits correctly"
        input: "12345"
        output: "5"
        difficulty: "easy"
        hint: "Remove one digit at a time using integer division"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://www.youtube.com/watch?v=33n-lb1Ujp4"

      - id: py-ce-while-006
        title: "Factorial Calculation"
        task: |
          Create a program to calculate the factorial of a given number using a `while` loop.
        requirements:
          - "Use while loop"
          - "Handle 0 and 1 cases"
          - "Calculate correct factorial"
        input: "5"
        output: "120"
        difficulty: "hard"
        hint: "Multiply numbers from 1 to n sequentially"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://www.youtube.com/watch?v=33n-lb1Ujp4"

      - id: py-ce-while-007
        title: "Print Even Numbers"
        task: |
          Write a program to print even numbers between 1 and 20 using a `while` loop.
        requirements:
          - "Use while loop"
          - "Print only even numbers"
          - "Include 20 if even"
        input: ""
        output: "2 4 6 8 10 12 14 16 18 20"
        difficulty: "easy"
        hint: "Check remainder when divided by 2"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://www.youtube.com/watch?v=33n-lb1Ujp4"

      - id: py-ce-while-011
        title: "Sum Numbers Until Zero Input"
        task: |
          Write a Python program that continuously prompts the user to enter numbers. 
          The program should calculate and display the sum of all entered numbers. 
          The input process should terminate when the user enters the number `0`.
        requirements:
          - "Use a `while` loop to repeatedly take input."
          - "The loop must terminate when the user enters `0`."
          - "Initialize a sum variable to accumulate the numbers."
          - "Convert user input to an integer before performing calculations."
          - "Print the final sum after the loop finishes."
        input: "5\n7\n8\n2\n0"
        output: "Sum of the numbers: 22"
        difficulty: "easy"
        hint: "Initialize your sum to 0. Get the first number outside the loop. The `while` loop condition should check if the number is not 0. Inside the loop, add the number to the sum, then get the next number."
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://www.youtube.com/watch?v=xvg69k1Fldc"

      - id: py-ce-while-009
        title: "Sum of Digits"
        task: |
          Write a program to calculate the sum of digits of a given number using a `while` loop.
        requirements:
          - "Use while loop"
          - "Handle multi-digit numbers"
          - "Calculate correct sum"
        input: "123"
        output: "6"
        difficulty: "medium"
        hint: "Extract last digit using modulo, remove it using division"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://www.youtube.com/watch?v=33n-lb1Ujp4"

      - id: py-ce-while-010
        title: "Count Occurrence of a Specific Digit"
        task: |
          Write a program to count occurrences of a specific digit in a number using Python.
        requirements:
          - "Use while loop"
          - "Handle string or numeric input"
          - "Count all occurrences"
        input: |
          122333
          2
        output: "2"
        difficulty: "medium"
        hint: "Convert number to string or use modulo operations"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://www.youtube.com/watch?v=MXWbTdvSBVs"

  - topic: loops-for
    exercises:
      - id: py-ce-loop-001
        title: "Print 'Python' 5 times"
        task: |
          Write a `for` loop to print the word "Python" five times.
        requirements:
          - "Use a for loop"
          - "Print exactly 5 times"
        input: ""
        output: |
          Python
          Python
          Python
          Python
          Python
        difficulty: "easy"
        hint: "Use range(5) in your for loop"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://youtu.be/LDULv7B9QdQ"

      - id: py-ce-loop-002
        title: "Print numbers 0 to 9"
        task: |
          Write a `for` loop to print numbers from 0 to 9.
        requirements:
          - "Use a for loop"
          - "Print numbers 0 through 9 inclusive"
        input: ""
        output: "0 1 2 3 4 5 6 7 8 9"
        difficulty: "easy"
        hint: "Use range(10)"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://youtube.com/shorts/zIU3X59TcBE"

      - id: py-ce-loop-003
        title: "Print even numbers 2 to 20"
        task: |
          Write a `for` loop to print all even numbers from 2 to 20.
        requirements:
          - "Use a for loop"
          - "Print only even numbers"
          - "Include 2 and 20 if applicable"
        input: ""
        output: "2 4 6 8 10 12 14 16 18 20"
        difficulty: "easy"
        hint: "Use range() with step parameter"
        resource:
          name: ""
          url: ""

      - id: py-ce-loop-004
        title: "Print each character in a string"
        task: |
          Write a `for` loop to iterate through the string "Hello, World!" and print each character.
        requirements:
          - "Iterate through each character"
          - "Print each character on a new line"
        input: ""
        output: |
          H
          e
          l
          l
          o
          ,
           
          W
          o
          r
          l
          d
          !
        difficulty: "easy"
        hint: "Strings are iterable in Python"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://youtu.be/FgMHDLRi_G4"

      - id: py-ce-loop-005
        title: "Find the factorial of a number"
        task: |
          Write a `for` loop to calculate the factorial of a given number, e.g., 5! = 5 Ã— 4 Ã— 3 Ã— 2 Ã— 1.
        requirements:
          - "Use a for loop"
          - "Calculate factorial correctly"
          - "Handle input 0 (0! = 1)"
        input: "5"
        output: "120"
        difficulty: "easy"
        hint: "Initialize result variable to 1 before loop"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://youtu.be/K5LV5I2hFg4"

      - id: py-ce-loop-006
        title: "Squares of numbers 1 to 5"
        task: |
          Write a Python for loop that prints the square of each number from 1 to 5.
        requirements:
          - "Use a for loop"
          - "Print square of each number"
        input: ""
        output: "1 4 9 16 25"
        difficulty: "easy"
        hint: "Use ** operator for exponentiation"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://youtu.be/ecGCXSxHjsw"

      - id: py-ce-loop-007
        title: "Count down from 10 to 1"
        task: |
          Use a `for` loop to print numbers from 10 down to 1.
        requirements:
          - "Use a for loop"
          - "Print numbers in descending order"
        input: ""
        output: "10 9 8 7 6 5 4 3 2 1"
        difficulty: "easy"
        hint: "Use range() with negative step"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://bit.ly/3yrTe0e"

      - id: py-ce-loop-008
        title: "Calculate the sum of the first N natural numbers"
        task: |
          Calculate the sum of the first N natural numbers using a for loop.
        requirements:
          - "Use a for loop"
          - "Calculate correct sum"
        input: "5"
        output: "15"
        difficulty: "easy"
        hint: "Initialize sum variable before loop"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://youtu.be/FgMHDLRi_G4"

      - id: py-ce-loop-009
        title: "Print the multiplication table for 5"
        task: |
          Write a `for` loop to print the multiplication table for the number 5.
        requirements:
          - "Use a for loop"
          - "Print table up to 10x5"
        input: ""
        output: |
          5 x 1 = 5
          5 x 2 = 10
          5 x 3 = 15
          5 x 4 = 20
          5 x 5 = 25
          5 x 6 = 30
          5 x 7 = 35
          5 x 8 = 40
          5 x 9 = 45
          5 x 10 = 50
        difficulty: "intermediate"
        hint: "Use string formatting for clean output"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://www.youtube.com/watch?v=wqtVGYn7NpQ&list=PLKYRx0Ibk7Vi-CC7ik98qT0VKK0F7ikja&index=41"

      - id: py-ce-loop-010
        title: "Print the first 10 Fibonacci numbers"
        task: |
          Write a `for` loop to generate the first 10 numbers in the Fibonacci sequence.
        requirements:
          - "Use a for loop"
          - "Generate correct sequence"
        input: ""
        output: "0 1 1 2 3 5 8 13 21 34"
        difficulty: "intermediate"
        hint: "You'll need to track two previous numbers"
        resource:
          name: ""
          url: ""

      - id: py-ce-loop-011
        title: "Check if a number is prime"
        task: |
          Write a `for` loop to check if a given number is prime.
        requirements:
          - "Use a for loop"
          - "Correctly identify prime numbers"
        input: "7"
        output: "True"
        difficulty: "intermediate"
        hint: "Check divisors up to square root of number"
        resource:
          name: ""
          url: ""

      - id: py-ce-loop-012
        title: "Sum of digits of a number"
        task: |
          Write a `for` loop to calculate the sum of the digits of a given number, e.g., 1234.
        requirements:
          - "Use a for loop"
          - "Calculate correct sum"
        input: "1234"
        output: "10"
        difficulty: "intermediate"
        hint: "Convert number to string to iterate digits"
        resource:
          name: ""
          url: ""

      - id: py-ce-loop-013
        title: "Print a pattern of stars"
        task: |
          Use nested `for` loops to print a right-aligned triangle pattern.
        requirements:
          - "Use nested for loops"
          - "Print correct pattern"
        input: ""
        output: |
          *
          **
          ***
          ****
          *****
        difficulty: "intermediate"
        hint: "Outer loop for rows, inner loop for columns"
        resource:
          name: ""
          url: ""

      - id: py-ce-loop-014
        title: "Print odd numbers between 1 and 20"
        task: |
          Write a `for` loop to print all odd numbers between 1 and 20.
        requirements:
          - "Use a for loop"
          - "Print only odd numbers"
        input: ""
        output: "1 3 5 7 9 11 13 15 17 19"
        difficulty: "intermediate"
        hint: "Check remainder using modulo operator"
        resource:
          name: ""
          url: ""

      - id: py-ce-loop-015
        title: "Count vowels in a string"
        task: |
          Use a `for` loop to count the number of vowels in the string "Hello, World!".
        requirements:
          - "Use a for loop"
          - "Count all vowels (case-insensitive)"
        input: ""
        output: "3"
        difficulty: "intermediate"
        hint: "Check each character against a set of vowels"
        resource:
          name: ""
          url: ""

      - id: py-ce-loop-016
        title: "Generate a list of even numbers"
        task: |
          Use a `for` loop to generate a list of even numbers between 1 and 20.
        requirements:
          - "Use a for loop"
          - "Create a list of even numbers"
        input: ""
        output: "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
        difficulty: "advanced"
        hint: "Use list comprehension or append to list"
        resource:
          name: ""
          url: ""

      - id: py-ce-loop-017
        title: "Print numbers divisible by 3 and 5 between 1 and 50"
        task: |
          Use a `for` loop to print all numbers between 1 and 50 that are divisible by both 3 and 5.
        requirements:
          - "Use a for loop"
          - "Check divisibility by both 3 and 5"
        input: ""
        output: "15 30 45"
        difficulty: "advanced"
        hint: "Check divisibility by 15 (LCM of 3 and 5)"
        resource:
          name: ""
          url: ""

      - id: py-ce-loop-018
        title: "Print a right-angle triangle of numbers"
        task: |
          Use nested `for` loops to print a right-angle triangle of numbers.
        requirements:
          - "Use nested for loops"
          - "Print correct pattern"
        input: ""
        output: |
          1
          12
          123
          1234
          12345
        difficulty: "advanced"
        hint: "Outer loop for rows, inner loop for columns"
        resource:
          name: ""
          url: ""

      - id: py-ce-loop-019
        title: "Print multiples of 3 up to 30"
        task: |
          Use a `for` loop to print all multiples of 3 up to 30.
        requirements:
          - "Use a for loop"
          - "Print correct multiples"
        input: ""
        output: "3 6 9 12 15 18 21 24 27 30"
        difficulty: "advanced"
        hint: "Use range() with step parameter"
        resource:
          name: ""
          url: ""

      - id: py-ce-loop-020
        title: "Find numbers divisible by 7 and 11 between 1 and 100"
        task: |
          Use a `for` loop to print all numbers between 1 and 100 that are divisible by both 7 and 11.
        requirements:
          - "Use a for loop"
          - "Check divisibility by both 7 and 11"
        input: ""
        output: "77"
        difficulty: "advanced"
        hint: "Check divisibility by 77 (LCM of 7 and 11)"
        resource:
          name: ""
          url: ""

      - id: py-ce-loop-021
        title: "Calculate the harmonic sum of n numbers"
        task: |
          Calculate the harmonic sum of n numbers using a for loop.
        requirements:
          - "Use a for loop"
          - "Calculate correct harmonic sum"
        input: "5"
        output: "2.283333333333333"
        difficulty: "advanced"
        hint: "Harmonic sum is 1 + 1/2 + 1/3 + ... + 1/n"
        resource:
          name: ""
          url: ""


  - topic: tuples
    exercises:
      - id: py-ce-tuple-001
        title: "Create and Access Tuple"
        task: |
          Create a tuple containing three colors and print the second element.
        requirements:
          - "Create a tuple with exactly 3 elements"
          - "Access the element at index 1"
        input: ""
        output: "green"
        difficulty: "easy"
        hint: "Remember tuple indexing starts at 0"
        resource:
          name: "View Solution"
          url: null

      - id: py-ce-tuple-002
        title: "Tuple Slicing"
        task: |
          Given a tuple (1, 2, 3, 4, 5), create a new tuple with elements from index 1 to 3.
        requirements:
          - "Use slicing operation"
          - "Store result in a new variable"
        input: ""
        output: "(2, 3, 4)"
        difficulty: "easy"
        hint: "Slicing includes start index but excludes end index"

      - id: py-ce-tuple-003
        title: "Count Occurrences"
        task: |
          Count how many times the number 2 appears in the tuple (1, 2, 3, 2, 4, 2).
        requirements:
          - "Use the count() method"
          - "Print the result"
        input: ""
        output: "3"
        difficulty: "easy"
        hint: "Tuple methods are called using dot notation"

      - id: py-ce-tuple-004
        title: "Tuple Concatenation"
        task: |
          Combine two tuples (1, 2, 3) and (4, 5, 6) into a single tuple.
        requirements:
          - "Use the + operator"
          - "Print the combined tuple"
        input: ""
        output: "(1, 2, 3, 4, 5, 6)"
        difficulty: "easy"
        hint: "The + operator works for sequence types"

      - id: py-ce-tuple-005
        title: "Find Index"
        task: |
          Find the index of the first occurrence of "apple" in the tuple ("banana", "apple", "orange", "apple").
        requirements:
          - "Use the index() method"
          - "Print the result"
        input: ""
        output: "1"
        difficulty: "easy"
        hint: "Indexing starts at 0"

      - id: py-ce-tuple-006
        title: "Unpack Tuple"
        task: |
          Unpack the tuple (10, 20, 30) into three variables a, b, c and print them.
        requirements:
          - "Use tuple unpacking"
          - "Print all three variables"
        input: ""
        output: "10 20 30"
        difficulty: "medium"
        hint: "Number of variables must match tuple length"

      - id: py-ce-tuple-007
        title: "Reverse Tuple"
        task: |
          Reverse the tuple (1, 2, 3, 4, 5) using slicing.
        requirements:
          - "Use slicing with step parameter"
          - "Print the reversed tuple"
        input: ""
        output: "(5, 4, 3, 2, 1)"
        difficulty: "medium"
        hint: "Remember the slice syntax [start:stop:step]"

      - id: py-ce-tuple-008
        title: "Nested Tuple Access"
        task: |
          Access the value "python" from the nested tuple (("java", "python"), ("c++", "ruby")).
        requirements:
          - "Use chained indexing"
          - "Print the value"
        input: ""
        output: "python"
        difficulty: "medium"
        hint: "You'll need two index operations"

      - id: py-ce-tuple-009
        title: "Convert List to Tuple"
        task: |
          Convert the list [1, 2, 3] to a tuple and print it.
        requirements:
          - "Use the tuple() constructor"
          - "Print the resulting tuple"
        input: ""
        output: "(1, 2, 3)"
        difficulty: "easy"
        hint: "The tuple() function accepts any iterable"

      - id: py-ce-tuple-010
        title: "Tuple Repetition"
        task: |
          Create a new tuple by repeating the tuple (1, 2) three times.
        requirements:
          - "Use the * operator"
          - "Print the result"
        input: ""
        output: "(1, 2, 1, 2, 1, 2)"
        difficulty: "easy"
        hint: "The * operator works with sequences"

  - topic: if-elif-else
    exercises:
      - id: py-ce-cond-001
        title: "FizzBuzz"
        task: |
          Write a program that prints the numbers from 1 to n. 
          - But for multiples of 3, print "Fizz" instead of the number
          - and for the multiples of 5, print "Buzz". 
          - For numbers which are multiples of both 3 and 5, print "FizzBuzz".
        requirements:
          - "Use if-elif-else structure"
          - "Handle numbers from 1 to n inclusive"
        input: "15"
        output: |
          1
          2
          Fizz
          4
          Buzz
          Fizz
          7
          8
          Fizz
          Buzz
          11
          Fizz
          13
          14
          FizzBuzz
        difficulty: "easy"

      - id: py-ce-cond-002
        title: "Check Positive, Negative, or Zero"
        task: |
          Write a program to check if a number is positive, negative, or zero.
        requirements:
          - "Use if-elif-else structure"
          - "Handle all three cases"
        input: "-5"
        output: "Negative"
        difficulty: "easy"

      - id: py-ce-cond-003
        title: "Even or Odd"
        task: |
          Write a program to check if a number is even or odd.
        requirements:
          - "Use if-else structure"
          - "Handle both cases"
        input: "7"
        output: "Odd"
        difficulty: "easy"

      - id: py-ce-cond-004
        title: "Largest of Three Numbers"
        task: |
          Write a program to find the largest of three numbers.
        requirements:
          - "Use if-elif-else structure"
          - "Handle all possible cases"
        input: |
          5
          9
          2
        output: "9"
        difficulty: "easy"

      - id: py-ce-cond-005
        title: "Grade Assignment"
        task: |
          Write a program to assign grades based on the score:
          - A (90-100)
          - B (80-89)
          - C (70-79)
          - D (60-69)
          - F (<60)
        requirements:
          - "Use if-elif-else structure"
          - "Handle edge cases"
        input: "85"
        output: "B"
        difficulty: "easy"

      - id: py-ce-cond-006
        title: "Leap Year Check"
        task: |
          Write a program to check if a year is a leap year or not.
          A leap year is divisible by 4, but not by 100 unless also divisible by 400.
        requirements:
          - "Use nested if-elif-else structure"
          - "Handle all leap year conditions"
        input: "2020"
        output: "Leap year"
        difficulty: "medium"

      - id: py-ce-cond-007
        title: "Age Group Classification"
        task: |
          Write a program to classify age into:
          - Child (0-12)
          - Teenager (13-19)
          - Adult (20-64)
          - Senior (65+)
        requirements:
          - "Use if-elif-else structure"
          - "Handle all age ranges"
        input: "25"
        output: "Adult"
        difficulty: "easy"

      - id: py-ce-cond-008
        title: "Temperature Description"
        task: |
          Write a program to describe the temperature:
          - Hot (>30Â°C)
          - Warm (20-30Â°C)
          - Cold (<20Â°C)
        requirements:
          - "Use if-elif-else structure"
          - "Handle all temperature ranges"
        input: "25.5"
        output: "Warm"
        difficulty: "easy"

      - id: py-ce-cond-009
        title: "Voter Eligibility"
        task: |
          Write a program to check if a person is eligible to vote (18+ years).
        requirements:
          - "Use if-else structure"
          - "Handle edge case (exactly 18)"
        input: "17"
        output: "Not eligible"
        difficulty: "easy"

      - id: py-ce-cond-010
        title: "Password Strength Checker"
        task: |
          Write a program to check the strength of a password:
          - Weak (length <6)
          - Medium (6-10 characters)
          - Strong (>10 characters)
        requirements:
          - "Use if-elif-else structure"
          - "Check only length for simplicity"
        input: "password123"
        output: "Strong"
        difficulty: "easy"

      - id: py-ce-cond-011
        title: "Simple Calculator"
        task: |
          Write a simple calculator program that performs:
          - Addition (+)
          - Subtraction (-)
          - Multiplication (*)
          - Division (/)
        requirements:
          - "Use if-elif-else structure"
          - "Handle division by zero"
        input: |
          5
          2
          /
        output: "2.5"
        difficulty: "medium"

      - id: py-ce-cond-012
        title: "BMI Calculator"
        task: |
          Write a program to calculate BMI and categorize:
          - Underweight (<18.5)
          - Normal (18.5-24.9)
          - Overweight (25-29.9)
          - Obese (30+)
        requirements:
          - "Use if-elif-else structure"
          - "Calculate BMI as weight(kg)/height(m)^2"
        input: |
          1.75
          70
        output: "Normal"
        difficulty: "medium"

      - id: py-ce-cond-013
        title: "Triangle Type Checker"
        task: |
          Write a program to check the type of a triangle:
          - Equilateral (all sides equal)
          - Isosceles (two sides equal)
          - Scalene (all sides different)
        requirements:
          - "Use if-elif-else structure"
          - "First validate if sides can form a triangle"
        input: |
          5
          5
          5
        output: "Equilateral"
        difficulty: "medium"

      - id: py-ce-cond-014
        title: "Day of the Week"
        task: |
          Write a program to print the day of the week based on a number (1-7).
        requirements:
          - "Use if-elif-else structure"
          - "Handle invalid inputs"
        input: "3"
        output: "Wednesday"
        difficulty: "easy"

      - id: py-ce-cond-015
        title: "Month Days"
        task: |
          Write a program to print the number of days in a given month (1-12).
          Assume February has 28 days (ignore leap years).
        requirements:
          - "Use if-elif-else structure"
          - "Handle invalid inputs"
        input: "4"
        output: "30"
        difficulty: "medium"

      - id: py-ce-cond-016
        title: "Discount Calculator"
        task: |
          Write a program to calculate the discount on a product:
          - 10% if price >=1000
          - 5% if price >=500
          - No discount otherwise
        requirements:
          - "Use if-elif-else structure"
          - "Calculate final price after discount"
        input: "750"
        output: "712.5"
        difficulty: "easy"

      - id: py-ce-cond-017
        title: "Character Checker"
        task: |
          Write a program to check if a character is a vowel or consonant.
        requirements:
          - "Use if-elif-else structure"
          - "Handle both uppercase and lowercase"
        input: "E"
        output: "Vowel"
        difficulty: "easy"

      - id: py-ce-cond-018
        title: "Valid Triangle Checker"
        task: |
          Write a program to check if three given lengths can form a triangle.
          (Sum of any two sides must be greater than the third)
        requirements:
          - "Use if-else structure with logical operators"
          - "Check all three conditions"
        input: |
          3
          4
          5
        output: "Valid triangle"
        difficulty: "easy"

      - id: py-ce-cond-019
        title: "Multiples of Five"
        task: |
          Write a program to check if a number is a multiple of five.
        requirements:
          - "Use if-else structure"
          - "Handle both cases"
        input: "25"
        output: "Multiple of five"
        difficulty: "easy"

      - id: py-ce-cond-020
        title: "Alphabet Case Checker"
        task: |
          Write a program to check if an alphabet is uppercase or lowercase.
        requirements:
          - "Use if-else structure"
          - "Handle non-alphabet inputs"
        input: "H"
        output: "Uppercase"
        difficulty: "easy"

  - topic: if-elif-else
    exercises:
      - id: py-ce-cond-001
        title: "Basic Grade Classifier"
        task: |
          Write a program that:
          1. Takes a numerical score as input (0-100)
          2. Prints the grade based on:
             - A (90-100)
             - B (80-89)
             - C (70-79)
             - D (60-69)
             - F (<60)
        requirements:
          - "Use if-elif-else structure"
          - "Handle edge cases (scores exactly at boundaries)"
        input: "85"
        output: "Grade: B"
        resource:
          name: "Python if statements"
          url: "https://docs.python.org/3/tutorial/controlflow.html#if-statements"
        difficulty: "easy"

      - id: py-ce-cond-002
        title: "Number Properties Checker"
        task: |
          Write a program that:
          1. Takes a number as input
          2. Prints whether the number is:
             - Positive, negative or zero
             - Even or odd (only if non-zero)
        requirements:
          - "Use nested if statements"
          - "Handle zero case separately"
        input: "-7"
        output: |
          Negative
          Odd
        resource:
          name: "Python nested if"
          url: "https://www.w3schools.com/python/python_conditions.asp"
        difficulty: "easy"

      - id: py-ce-cond-003
        title: "Login System Simulator"
        task: |
          Create a simple login system that:
          1. Takes username and password as input
          2. Checks:
             - If username is "admin" and password is "12345", print "Access granted"
             - If username is correct but password wrong, print "Wrong password"
             - If username doesn't exist, print "User not found"
        requirements:
          - "Use if-elif-else with multiple conditions"
          - "Use string comparison"
        input: |
          admin
          12345
        output: "Access granted"
        resource:
          name: "Python logical operators"
          url: "https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not"
        difficulty: "medium"

      - id: py-ce-cond-004
        title: "Leap Year Calculator"
        task: |
          Write a program that:
          1. Takes a year as input
          2. Determines if it's a leap year (print "Leap year" or "Not a leap year")
             - Rules:
               - Divisible by 4 â†’ leap year
               - Except if divisible by 100 â†’ not leap year
               - Unless also divisible by 400 â†’ leap year
        requirements:
          - "Use nested if statements"
          - "Handle all leap year conditions"
        input: "2000"
        output: "Leap year"
        resource:
          name: "Python condition precedence"
          url: "https://docs.python.org/3/reference/expressions.html#operator-precedence"
        difficulty: "medium"

      - id: py-ce-cond-005
        title: "Shopping Discount Calculator"
        task: |
          Create a program that:
          1. Takes total purchase amount as input
          2. Applies discounts:
             - 5% if amount â‰¥ 1000
             - 10% if amount â‰¥ 5000
             - 15% if amount â‰¥ 10000
          3. Prints final amount after discount
        requirements:
          - "Use if-elif-else structure"
          - "Calculate discount mathematically"
        input: "7500"
        output: "6750.0"
        resource:
          name: "Python math operations"
          url: "https://docs.python.org/3/tutorial/introduction.html#numbers"
        difficulty: "medium"

      - id: py-ce-cond-006
        title: "Triangle Type Checker"
        task: |
          Write a program that:
          1. Takes three side lengths (a, b, c) as input
          2. Determines if they form:
             - Equilateral triangle (all sides equal)
             - Isosceles triangle (exactly two sides equal)
             - Scalene triangle (no sides equal)
             - Not a triangle (sum of any two sides â‰¤ third side)
        requirements:
          - "Use nested if statements"
          - "Check triangle validity first"
        input: |
          5
          5
          8
        output: "Isosceles triangle"
        resource:
          name: "Python comparison operators"
          url: "https://docs.python.org/3/library/stdtypes.html#comparisons"
        difficulty: "hard"

  - topic: lists
    exercises:
      - id: py-ce-list-001
        title: "List Creation and Indexing"
        task: |
          1. Create a list called `fruits` with these elements: 'apple', 'banana', 'cherry', 'date'
          2. Print the first and last elements using indexing
          3. Print every alternate fruit starting from the second one
        requirements:
          - "Use positive and negative indexing"
          - "Use slicing for alternate elements"
        input: "No input required"
        output: |
          First: apple
          Last: date
          Alternate: ['banana', 'date']
        resource:
          name: "Python Lists"
          url: "https://docs.python.org/3/tutorial/introduction.html#lists"
        difficulty: "easy"

      - id: py-ce-list-002
        title: "List Slicing Operations"
        task: |
          Given the list: numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
          1. Create a new list with first 5 numbers
          2. Create a new list with last 3 numbers
          3. Create a new list with even-indexed numbers
          4. Create a reversed version of the list
        requirements:
          - "Use slicing operations only"
          - "Don't use any loop constructs"
        input: "No input required"
        output: |
          First 5: [0, 1, 2, 3, 4]
          Last 3: [7, 8, 9]
          Even indexed: [0, 2, 4, 6, 8]
          Reversed: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
        resource:
          name: "Python List Slicing"
          url: "https://www.geeksforgeeks.org/python-list-slicing/"
        difficulty: "medium"

      - id: py-ce-list-003
        title: "List Methods Practice"
        task: |
          Start with an empty list called `inventory`
          1. Add items: 'sword', 'shield', 'potion' (in this order)
          2. Insert 'helmet' at the beginning
          3. Remove 'shield' from the list
          4. Sort the items alphabetically
          5. Count how many 'potion' items exist
        requirements:
          - "Use appropriate list methods for each operation"
          - "Print the list after each step"
        input: "No input required"
        output: |
          After adding: ['sword', 'shield', 'potion']
          After inserting: ['helmet', 'sword', 'shield', 'potion']
          After removing: ['helmet', 'sword', 'potion']
          After sorting: ['helmet', 'potion', 'sword']
          Potion count: 1
        resource:
          name: "Python List Methods"
          url: "https://www.w3schools.com/python/python_ref_list.asp"
        difficulty: "medium"

      - id: py-ce-list-004
        title: "Combined List Operations"
        task: |
          Given two lists:
          list1 = [1, 2, 3, 4, 5]
          list2 = [10, 20, 30, 40, 50]
          
          1. Create a new list containing elements from both lists
          2. Replace the middle three elements (2,3,4) with [99, 100]
          3. Remove the last two elements
          4. Double each remaining element
        requirements:
          - "Don't modify the original lists"
          - "Use list concatenation, slicing, and comprehension"
        input: "No input required"
        output: |
          Final list: [2, 200, 10, 20, 30, 40, 50]
        resource:
          name: "Python List Operations"
          url: "https://realpython.com/python-lists-tuples/"
        difficulty: "hard"

  - topic: operators
    exercises:
      - id: py-ce-op-001
        title: "Basic Arithmetic Operations"
        task: |
          1. Create two variables `a` and `b` with values 15 and 4 respectively
          2. Calculate and print:
            - Sum of a and b
            - Difference between a and b
            - Product of a and b
            - Quotient of a divided by b (float division)
            - Remainder of a divided by b
            - a raised to the power of b
        requirements:
          - "Use appropriate arithmetic operators for each calculation"
          - "Print all results in one print statement"
        input: "No input required"
        output: |
          19 11 60 3.75 3 50625
        resource:
          name: "Python Arithmetic Operators"
          url: "https://www.w3schools.com/python/python_operators.asp"
        difficulty: "easy"

      - id: py-ce-op-002
        title: "Temperature Conversion"
        task: |
          Convert 100Â° Fahrenheit to Celsius using the formula:
          C = (F - 32) * (5/9)
          1. Create a variable `fahrenheit` with value 100
          2. Calculate the celsius equivalent
          3. Print the result rounded to 2 decimal places
        requirements:
          - "Use proper operator precedence"
          - "Use the round() function for rounding"
        input: "No input required"
        output: |
          37.78
        resource:
          name: "Operator Precedence"
          url: "https://docs.python.org/3/reference/expressions.html#operator-precedence"
        difficulty: "easy"
  - topic: Assignment Operators
    exercises:
      - id: py-ce-op-003
        title: "Counter Increment"
        task: |
          1. Initialize a variable `counter` with value 5
          2. Using augmented assignment operators:
            - Add 3 to counter
            - Multiply counter by 2
            - Subtract 4 from counter
            - Divide counter by 2
          3. Print the final value
        requirements:
          - "Must use augmented assignment operators (+=, *=, -=, /=)"
          - "Perform operations in the specified order"
        input: "No input required"
        output: |
          6.0
        difficulty: "easy"

  - topic: Comparison Operators
    exercises:
      - id: py-ce-op-004
        title: "Age Verification"
        task: |
          1. Create a variable `age` with your age
          2. Check and print whether:
            - You're 18 or older
            - Your age is between 13 and 19 (teenager)
            - Your age is exactly 21
        requirements:
          - "Use comparison operators (>, <, >=, <=, ==)"
          - "Use logical operators (and, or) where needed"
          - "Print results as booleans"
        input: "No input required"
        output: |
          True False False
        difficulty: "medium"

  - topic: Logical Operators
    exercises:
      - id: py-ce-op-005
        title: "Login System"
        task: |
          Create a simple login check:
          1. Set variables `username` to "admin" and `password` to "12345"
          2. Check if either:
            - Both username and password are correct, OR
            - A variable `remember_me` is True
          3. Print "Access granted" or "Access denied"
        requirements:
          - "Use logical operators (and, or, not)"
          - "Include all conditions in one if statement"
        input: "No input required"
        output: |
          Access granted
        difficulty: "medium"

  - topic: Bitwise Operators
    exercises:
      - id: py-ce-op-006
        title: "Flag Permissions"
        task: |
          Implement basic permission checks using bitwise operations:
          1. Define permissions as:
            - READ = 0b100
            - WRITE = 0b010
            - EXECUTE = 0b001
          2. Create user permission `user_flags = 0b110`
          3. Check and print which permissions the user has
        requirements:
          - "Use bitwise AND (&) operator for checks"
          - "Print permissions as 'Can read', 'Can write', 'Can execute'"
        input: "No input required"
        output: |
          Can read
          Can write
        difficulty: "hard"

      - id: py-ce-op-007
        title: "Expression Evaluation"
        task: |
          Evaluate the following expression correctly:
          5 + 3 * 2 ** 2 / 4 - 1
          1. Compute the result manually following operator precedence
          2. Verify by making Python compute it
          3. Print both your manual result and Python's result
        requirements:
          - "Show your manual calculation steps in comments"
          - "Use parentheses to force different evaluation order"
        input: "No input required"
        output: |
          Manual: 7.0
          Python: 7.0
        difficulty: "hard"

      - id: py-ce-var-001
        title: "Basic Variable Assignment"
        task: |
          1. Create a variable called `name` and assign your name to it
          2. Create a variable called `age` and assign your age to it
          3. Create a variable called `city` and assign your city to it
          4. Print all three variables
        requirements:
          - "Use proper variable naming conventions"
          - "Include all three variables in one print statement"
        input: "No input required"
        output: |
          John 30 New York
        resource:
          name: "Variable Basics"
          url: "https://www.w3schools.com/python/python_variables.asp"
        difficulty: "easy"

      - id: py-ce-var-002
        title: "Variable Reassignment"
        task: |
          1. Create variable `favorite_color` with initial color
          2. Print initial value
          3. Reassign new color
          4. Print new value
        requirements:
          - "Demonstrate variable reassignment"
          - "Show both before/after states"
        input: "No input required"
        output: |
          Blue
          Green
        resource:
          name: "Variable Reassignment"
          url: "https://realpython.com/python-variables/"
        difficulty: "easy"

      - id: py-ce-var-003
        title: "Variable Operations"
        task: |
          1. Create variables `a=5` and `b=10`
          2. Calculate sum, difference, and product
          3. Print all results
        requirements:
          - "Use separate variables for each operation"
          - "Print formatted output"
        input: "No input required"
        output: |
          Sum: 15
          Difference: -5
          Product: 50
        resource:
          name: "Python Operators"
          url: "https://www.programiz.com/python-programming/operators"
        difficulty: "easy"

      - id: py-ce-var-004
        title: "String Concatenation"
        task: |
          1. Create `first_name` and `last_name` variables
          2. Combine into `full_name` with space
          3. Print result
        requirements:
          - "Use string concatenation"
          - "Handle spacing properly"
        input: "No input required"
        output: |
          Alice Johnson
        example_solution: |
          first_name = "Alice"
          last_name = "Johnson"
          full_name = first_name + " " + last_name
          print(full_name)
        difficulty: "easy"

      - id: py-ce-var-005
        title: "Input and Variables"
        task: |
          1. Get user's name via input()
          2. Get user's age via input()
          3. Print greeting message
        requirements:
          - "Use descriptive input prompts"
          - "Format output string properly"
        input: |
          Enter your name: Alice
          Enter your age: 25
        output: |
          Hello Alice, you are 25 years old.
        example_solution: |
          user_name = input("Enter your name: ")
          user_age = input("Enter your age: ")
          print("Hello", user_name + ", you are", user_age, "years old.")
        difficulty: "easy"

      - id: py-ce-var-006
        title: "Circle Area Calculation"
        task: |
          1. Get radius from user
          2. Calculate area (Ï€rÂ²)
          3. Print result
        requirements:
          - "Use math.pi for Ï€"
          - "Handle decimal inputs"
        input: |
          Enter radius: 5
        output: |
          Area: 78.53981633974483
        resource:
          name: "View Solution"
          url: "https://www.youtube.com/watch?v=QoECA8v_2tQ"
        difficulty: "medium"

      - id: py-ce-var-007
        title: "Variable Swapping"
        task: |
          1. Initialize two variables
          2. Swap values without third variable
          3. Print before/after
        requirements:
          - "Use tuple unpacking method"
          - "No temporary variables allowed"
        input: "No input required"
        output: |
          Before: x=5, y=10
          After: x=10, y=5
        resource:
          name: "View Solution"
          url: "https://youtu.be/CVy3A48WXeE"
        difficulty: "medium"

      - id: py-ce-var-008
        title: "Multiple Variable Assignment"
        task: |
          1. Assign multiple values to multiple variables
          2. Demonstrate both single-line and unpacking methods
        requirements:
          - "Show at least 3 variables"
          - "Include sequence unpacking example"
        input: "No input required"
        output: |
          Single-line: a=1, b=2, c=3
          Unpacking: x=10, y=20, z=30
        resource:
          name: "View Solution"
          url: "https://youtu.be/ur8rkDPzuSU"
        difficulty: "easy"

      - id: py-ce-wl-001
        title: "Age and Exercise Input Validation"
        task: |
          Create a program that:
          1. Validates age input (must be positive number)
          2. Gets user's name
          3. Validates exercise preference (only accepts Y/N)
          4. Prints all collected information
        requirements:
          - Use `while True` loops for input validation
          - "For age: reject non-numeric and non-positive values"
          - "For exercise preference: accept only Y or N (case insensitive)"
          - "Display formatted output with name and age"
          - "Handle all edge cases (empty input, wrong types, etc.)"
        input: |
          (Program should handle console input interactively)
          Example test sequence:
          Enter your age: abc
          Enter your age: -5
          Enter your age: 25
          Enter your name: Alice
          Do you like to exercise? (Y/N): maybe
          Do you like to exercise? (Y/N): N
        output: |
          Your name is Alice and you are 25 years old.

          Nice
        resource:
          name: "View Solution"
          url: "https://yasirbhutta.github.io/python/docs/loops-while/solutions/py-ce-wl-001.html"
        difficulty: "easy"

      - id: py-ce-001
        title: "Protected Attributes"
        task: |
          Create a `BankAccount` class with a protected `_balance` attribute.
          Implement methods to deposit and withdraw money with basic validation.
        requirements: |
          - Use single underscore convention for protected attribute
          - Prevent negative balance withdrawals
          - Include a method to display current balance
        input: |
          account = BankAccount(100)
          account.deposit(50)
          account.withdraw(30)
          account.display_balance()
        output: |
          Current balance: 120
        resource:
          name: "Protected Attributes Tutorial"
          url: "https://example.com/protected-attributes"
        difficulty: "easy"

      - id: py-ce-002
        title: "Private Attributes with Getters/Setters"
        task: |
          Create a `Person` class with private `__age` attribute.
          Implement proper getter and setter methods with age validation.
        requirements: |
          - Use double underscores for private attribute
          - Setter should reject ages < 0 or > 120
          - Getter should return age with "years" suffix
        input: |
          person = Person()
          person.set_age(25)
          print(person.get_age())
          person.set_age(150)
        output: |
          25 years
          Invalid age!
        resource:
          name: "Private Attributes Guide"
          url: "https://example.com/private-attributes"
        difficulty: "easy"

      - id: py-ce-003
        title: "Property Decorators"
        task: |
          Create a `Temperature` class that uses @property to control access to celsius value.
          Add validation to prevent temperatures below absolute zero (-273.15Â°C).
        requirements: |
          - Use @property for getter
          - Use @temperature.setter for setter
          - Raise ValueError for invalid temperatures
        input: |
          temp = Temperature()
          temp.celsius = 25
          print(temp.celsius)
          temp.celsius = -300
        output: |
          25
          ValueError: Temperature below absolute zero!
        resource:
          name: "Property Decorators Explained"
          url: "https://example.com/property-decorators"
        difficulty: "medium"

      - id: py-ce-004
        title: "Read-Only Property"
        task: |
          Create a `Circle` class with private `__radius` and read-only `area` property.
          The area should be calculated when accessed but not modifiable directly.
        requirements: |
          - Use private attribute for radius
          - Implement area as read-only property
          - Area calculation: Ï€rÂ² (use math.pi)
        input: |
          circle = Circle(5)
          print(circle.area)
          circle.area = 100
        output: |
          78.53981633974483
          AttributeError: can't set attribute
        resource:
          name: "Read-Only Properties"
          url: "https://example.com/readonly-properties"
        difficulty: "medium"

      - id: py-ce-005
        title: "Full Encapsulation Example"
        task: |
          Create a `Student` class that fully encapsulates student data:
          - Private name (validated to be non-empty)
          - Private grades list (with methods to add grades and calculate average)
        requirements: |
          - Use double underscore for private attributes
          - Implement proper getters/setters
          - Add method to calculate grade average
          - Prevent direct modification of grades list
        input: |
          student = Student("Alice")
          student.add_grade(90)
          student.add_grade(85)
          print(student.get_name())
          print(student.get_average())
        output: |
          Alice
          87.5
        resource:
          name: "Complete Encapsulation"
          url: "https://example.com/full-encapsulation"
        difficulty: "medium"

  - topic: oop-inheritance
    exercises:
      - id: py-ce-001
        title: "Basic Inheritance"
        task: |
          Create a `Vehicle` class with attributes like `brand` and `year`. Then, create a `Car` class that inherits from `Vehicle` and adds an additional attribute `model`.
        requirements: |
          - Define a method in the `Vehicle` class that prints basic vehicle details.
          - Override this method in the `Car` class to print additional details (e.g., model).
        input: |
          car = Car("Toyota", 2022, "Corolla")
          car.display_info()
        output: |
          Brand: Toyota, Year: 2022
          Model: Corolla
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-001"
        difficulty: "easy"

      - id: py-ce-002
        title: "Method Overriding"
        task: |
          Create a `Person` class with a method `greet()`. Then, create a `Student` class that inherits from `Person` and overrides the `greet()` method to display a custom greeting message.
        requirements: |
          - The `Person` class should have a `name` attribute.
          - The `Student` class should override the `greet()` method to say "Hello, I am [name], a student".
        input: |
          student = Student("Alice")
          student.greet()
        output: |
          Hello, I am Alice, a student.
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-002"
        difficulty: "easy"

      - id: py-ce-003
        title: "Using `super()` in Inheritance"
        task: |
          Create a `Shape` class with a method `area()` that returns `None`. Then, create a `Rectangle` class that inherits from `Shape` and calculates the area of the rectangle using the length and width. Use `super()` to call the `Shape` constructor.
        requirements: |
          - The `Rectangle` class should accept `length` and `width` as arguments.
          - The `area()` method in `Rectangle` should calculate and print the area of the rectangle.
        input: |
          rectangle = Rectangle(5, 3)
          print(f"Area of rectangle: {rectangle.area()}")
        output: |
          Area of rectangle: 15
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-003"
        difficulty: "easy"

      - id: py-ce-004
        title: "Multilevel Inheritance"
        task: |
          Create a class `Animal` with a method `sound()`. Then, create a `Dog` class that inherits from `Animal` and overrides the `sound()` method. Afterward, create a `Puppy` class that inherits from `Dog` and adds a new method `play()`.
        requirements: |
          - The `sound()` method should print a generic animal sound in the `Animal` class.
          - The `Puppy` class should print a playful message in the `play()` method.
        input: |
          puppy = Puppy()
          puppy.sound()  # Inherited from Dog
          puppy.play()   # Specific to Puppy
        output: |
          Bark!
          Puppy is playing!
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-004"
        difficulty: "easy"

      - id: py-ce-005
        title: "Hierarchical Inheritance"
        task: |
          Create a `Person` class with a method `info()` to display basic information. Then, create two classes `Employee` and `Student` that inherit from `Person` and override the `info()` method to show their specific details.
        requirements: |
          - The `Employee` class should display "Employee [name], [age], [position]".
          - The `Student` class should display "Student [name], [age], [major]".
        input: |
          emp = Employee("John", 30, "Software Engineer")
          emp.info()

          stu = Student("Jane", 20, "Computer Science")
          stu.info()
        output: |
          Employee John, Age: 30, Position: Software Engineer
          Student Jane, Age: 20, Major: Computer Science
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-005"
        difficulty: "easy"

      - id: py-ce-006
        title: "Dynamic Method Resolution Order (MRO)"
        task: |
          Create a `Bird` class, a `FlyingBird` class, and a `Penguin` class. The `Penguin` class should inherit from `Bird` and override the `fly()` method to indicate that penguins can't fly.
        requirements: |
          - Use the `super()` function to call methods from the `Bird` class, demonstrating method resolution order (MRO).
        input: |
          bird = Bird()
          bird.fly()

          flying_bird = FlyingBird()
          flying_bird.fly()

          penguin = Penguin()
          penguin.fly()
        output: |
          Bird is flying.
          Flying bird is soaring high.
          Penguins cannot fly.
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-006"
        difficulty: "easy"

  - topic: strings
    exercises:

      - id: py-ex-str-001
        title: "Replace Second Character Occurrence"
        task: |
          Write a Python function `replace_second_occurrence(main_string, old_char, new_char)` 
          - that replaces the second occurrence of `old_char` with `new_char` in `main_string`. 
          - If `old_char` appears fewer than two times, the string should remain unchanged.
        requirements: |
          - Define a function named `replace_second_occurrence` that accepts three arguments: 
            - the main string, the character to be replaced (old_char), and the new character (new_char).
          - Use `str.find()` or `str.index()` to locate the position of the first occurrence of `old_char`.
          - Use string slicing and concatenation to reconstruct the string, ensuring only the second occurrence is replaced.
          - Handle cases where the `old_char` does not appear at least twice in the string.
        input: |
          # Example 1: Basic replacement
          main_string_1 = "hello world"
          old_char_1 = "l"
          new_char_1 = "X"

          # Example 2: Another replacement
          main_string_2 = "banana"
          old_char_2 = "a"
          new_char_2 = "Z"

          # Example 3: Character appears only once
          main_string_3 = "apple"
          old_char_3 = "P" # Case sensitive, no match for 'P'
          new_char_3 = "Q"

          # Example 4: Character does not exist
          main_string_4 = "test"
          old_char_4 = "z"
          new_char_4 = "Q"
        output: |
          Original: hello world, Old Char: l, New Char: X -> Result: helXo world
          Original: banana, Old Char: a, New Char: Z -> Result: banZna
          Original: apple, Old Char: P, New Char: Q -> Result: apple
          Original: test, Old Char: z, New Char: Q -> Result: test
        difficulty: "medium"
        resource:
          name: "ðŸ“º Watch the solution now!"
          url: "https://yasirbhutta.github.io/python/docs/strings/practice-and-progress/solutions/py-ex-str-001.html"
          
      - id: py-str-001
        title: "String Information"
        task: |
          Ask the user for their name and print:
          - The name in all uppercase
          - The name in all lowercase
          - The number of characters in the name
        requirements: |
          - Use `input()`, `upper()`, `lower()`, and `len()`
        input: |
          name = input("Enter your name: ")
        output: |
          Uppercase: JOHN
          Lowercase: john
          Length: 4
        difficulty: "easy"

      - id: py-str-002
        title: "Remove Extra Spaces"
        task: |
          Given a string with leading and trailing spaces, remove them and print the cleaned sentence.
        requirements: |
          - Use the `strip()` method.
        input: |
          sentence = "   Python is fun!   "
        output: |
          Cleaned Sentence: Python is fun!
        difficulty: "easy"

      - id: py-str-003
        title: "String Alignment"
        task: |
          Align the word "Code" within a 20-character width using different alignments.
        requirements: |
          - Use `center()`, `ljust()`, and `rjust()`
        input: |
          word = "Code"
        output: |
          Centered :        Code        
          Left     : Code               
          Right    :               Code
        difficulty: "easy"

      - id: py-str-004
        title: "String Slicing"
        task: |
          Perform slicing on the string "Python Programming":
          - Extract and print the first 6 characters
          - Extract and print the last 11 characters
          - Extract and print characters from index 7 to 17
        requirements: |
          - Use slicing syntax with `[]`
        input: |
          text = "Python Programming"
        output: |
          First 6 characters: Python
          Last 11 characters: Programming
          Characters 7 to 17: Programming
        difficulty: "easy"

      - id: py-str-005
        title: "String Formatting"
        task: |
          Given name and age variables, print: "My name is Alice and I am 30 years old."
        requirements: |
          - Use f-strings or `format()` for string formatting.
        input: |
          name = "Alice"
          age = 30
        output: |
          My name is Alice and I am 30 years old.
        difficulty: "easy"
  - topic: lambda
    exercises:
      - id: py-lf-001
        title: "Reverse a String"
        task: |
          Create a lambda function to reverse a string.
        input: |
          "hello"
        output: |
          "olleh"
        difficulty: "medium"

      - id: py-lf-002
        title: "Check Substring"
        task: |
          Create a lambda function that returns `True` if a substring exists in a string.
        input: |
          "world", "hello world"
        output: |
          True
        difficulty: "medium"

      - id: py-lf-003
        title: "Calculate Rectangle Area"
        task: |
          Create a lambda function to calculate the area of a rectangle.
        input: |
          4, 7
        output: |
          28
        difficulty: "easy"

      - id: py-lf-004
        title: "Square List Elements (with `map`)"
        task: |
          Use a lambda with `map` to square each element in a list.
        input: |
          [1, 2, 3, 4]
        output: |
          [1, 4, 9, 16]
        difficulty: "hard"

      - id: py-lf-005
        title: "Filter Even Numbers (with `filter`)"
        task: |
          Use a lambda with `filter` to extract even numbers from a list.
        input: |
          [1, 2, 3, 4, 5, 6]
        output: |
          [2, 4, 6]
        difficulty: "hard"

      - id: py-lf-006
        title: "Maximum of Two Numbers"
        task: |
          Create a lambda function to return the maximum of two numbers.
        input: |
          8, 12
        output: |
          12
        difficulty: "medium"

      - id: py-lf-007
        title: "Uppercase Conversion"
        task: |
          Create a lambda function to convert a string to uppercase.
        input: |
          "lambda"
        output: |
          "LAMBDA"
        difficulty: "medium"

      - id: py-lf-008
        title: "Combine Strings"
        task: |
          Create a lambda function to concatenate two strings with a space.
        input: |
          "Hello", "World"
        output: |
          "Hello World"
        difficulty: "easy"

      - id: py-lf-009
        title: "Check Palindrome"
        task: |
          Create a lambda function to check if a string is a palindrome.
        input: |
          "madam"
        output: |
          True
        difficulty: "medium"
