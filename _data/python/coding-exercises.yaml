course: python
topics:

  - topic: if elif else
    exercises:
      - id: py-ce-cond-001
        title: "Basic Grade Classifier"
        task: |
          Write a program that:
          1. Takes a numerical score as input (0-100)
          2. Prints the grade based on:
             - A (90-100)
             - B (80-89)
             - C (70-79)
             - D (60-69)
             - F (<60)
        requirements:
          - "Use if-elif-else structure"
          - "Handle edge cases (scores exactly at boundaries)"
        input: "85"
        output: "Grade: B"
        resource:
          name: "Python if statements"
          url: "https://docs.python.org/3/tutorial/controlflow.html#if-statements"
        difficulty: "easy"

      - id: py-ce-cond-002
        title: "Number Properties Checker"
        task: |
          Write a program that:
          1. Takes a number as input
          2. Prints whether the number is:
             - Positive, negative or zero
             - Even or odd (only if non-zero)
        requirements:
          - "Use nested if statements"
          - "Handle zero case separately"
        input: "-7"
        output: |
          Negative
          Odd
        resource:
          name: "Python nested if"
          url: "https://www.w3schools.com/python/python_conditions.asp"
        difficulty: "easy"

      - id: py-ce-cond-003
        title: "Login System Simulator"
        task: |
          Create a simple login system that:
          1. Takes username and password as input
          2. Checks:
             - If username is "admin" and password is "12345", print "Access granted"
             - If username is correct but password wrong, print "Wrong password"
             - If username doesn't exist, print "User not found"
        requirements:
          - "Use if-elif-else with multiple conditions"
          - "Use string comparison"
        input: |
          admin
          12345
        output: "Access granted"
        resource:
          name: "Python logical operators"
          url: "https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not"
        difficulty: "medium"

      - id: py-ce-cond-004
        title: "Leap Year Calculator"
        task: |
          Write a program that:
          1. Takes a year as input
          2. Determines if it's a leap year (print "Leap year" or "Not a leap year")
             - Rules:
               - Divisible by 4 → leap year
               - Except if divisible by 100 → not leap year
               - Unless also divisible by 400 → leap year
        requirements:
          - "Use nested if statements"
          - "Handle all leap year conditions"
        input: "2000"
        output: "Leap year"
        resource:
          name: "Python condition precedence"
          url: "https://docs.python.org/3/reference/expressions.html#operator-precedence"
        difficulty: "medium"

      - id: py-ce-cond-005
        title: "Shopping Discount Calculator"
        task: |
          Create a program that:
          1. Takes total purchase amount as input
          2. Applies discounts:
             - 5% if amount ≥ 1000
             - 10% if amount ≥ 5000
             - 15% if amount ≥ 10000
          3. Prints final amount after discount
        requirements:
          - "Use if-elif-else structure"
          - "Calculate discount mathematically"
        input: "7500"
        output: "6750.0"
        resource:
          name: "Python math operations"
          url: "https://docs.python.org/3/tutorial/introduction.html#numbers"
        difficulty: "medium"

      - id: py-ce-cond-006
        title: "Triangle Type Checker"
        task: |
          Write a program that:
          1. Takes three side lengths (a, b, c) as input
          2. Determines if they form:
             - Equilateral triangle (all sides equal)
             - Isosceles triangle (exactly two sides equal)
             - Scalene triangle (no sides equal)
             - Not a triangle (sum of any two sides ≤ third side)
        requirements:
          - "Use nested if statements"
          - "Check triangle validity first"
        input: |
          5
          5
          8
        output: "Isosceles triangle"
        resource:
          name: "Python comparison operators"
          url: "https://docs.python.org/3/library/stdtypes.html#comparisons"
        difficulty: "hard"

  - topic: lists
    exercises:
      - id: py-ce-list-001
        title: "List Creation and Indexing"
        task: |
          1. Create a list called `fruits` with these elements: 'apple', 'banana', 'cherry', 'date'
          2. Print the first and last elements using indexing
          3. Print every alternate fruit starting from the second one
        requirements:
          - "Use positive and negative indexing"
          - "Use slicing for alternate elements"
        input: "No input required"
        output: |
          First: apple
          Last: date
          Alternate: ['banana', 'date']
        resource:
          name: "Python Lists"
          url: "https://docs.python.org/3/tutorial/introduction.html#lists"
        difficulty: "easy"

      - id: py-ce-list-002
        title: "List Slicing Operations"
        task: |
          Given the list: numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
          1. Create a new list with first 5 numbers
          2. Create a new list with last 3 numbers
          3. Create a new list with even-indexed numbers
          4. Create a reversed version of the list
        requirements:
          - "Use slicing operations only"
          - "Don't use any loop constructs"
        input: "No input required"
        output: |
          First 5: [0, 1, 2, 3, 4]
          Last 3: [7, 8, 9]
          Even indexed: [0, 2, 4, 6, 8]
          Reversed: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
        resource:
          name: "Python List Slicing"
          url: "https://www.geeksforgeeks.org/python-list-slicing/"
        difficulty: "medium"

      - id: py-ce-list-003
        title: "List Methods Practice"
        task: |
          Start with an empty list called `inventory`
          1. Add items: 'sword', 'shield', 'potion' (in this order)
          2. Insert 'helmet' at the beginning
          3. Remove 'shield' from the list
          4. Sort the items alphabetically
          5. Count how many 'potion' items exist
        requirements:
          - "Use appropriate list methods for each operation"
          - "Print the list after each step"
        input: "No input required"
        output: |
          After adding: ['sword', 'shield', 'potion']
          After inserting: ['helmet', 'sword', 'shield', 'potion']
          After removing: ['helmet', 'sword', 'potion']
          After sorting: ['helmet', 'potion', 'sword']
          Potion count: 1
        resource:
          name: "Python List Methods"
          url: "https://www.w3schools.com/python/python_ref_list.asp"
        difficulty: "medium"

      - id: py-ce-list-004
        title: "Combined List Operations"
        task: |
          Given two lists:
          list1 = [1, 2, 3, 4, 5]
          list2 = [10, 20, 30, 40, 50]
          
          1. Create a new list containing elements from both lists
          2. Replace the middle three elements (2,3,4) with [99, 100]
          3. Remove the last two elements
          4. Double each remaining element
        requirements:
          - "Don't modify the original lists"
          - "Use list concatenation, slicing, and comprehension"
        input: "No input required"
        output: |
          Final list: [2, 200, 10, 20, 30, 40, 50]
        resource:
          name: "Python List Operations"
          url: "https://realpython.com/python-lists-tuples/"
        difficulty: "hard"

  - topic: operators
    exercises:
      - id: py-ce-op-001
        title: "Basic Arithmetic Operations"
        task: |
          1. Create two variables `a` and `b` with values 15 and 4 respectively
          2. Calculate and print:
            - Sum of a and b
            - Difference between a and b
            - Product of a and b
            - Quotient of a divided by b (float division)
            - Remainder of a divided by b
            - a raised to the power of b
        requirements:
          - "Use appropriate arithmetic operators for each calculation"
          - "Print all results in one print statement"
        input: "No input required"
        output: |
          19 11 60 3.75 3 50625
        resource:
          name: "Python Arithmetic Operators"
          url: "https://www.w3schools.com/python/python_operators.asp"
        difficulty: "easy"

      - id: py-ce-op-002
        title: "Temperature Conversion"
        task: |
          Convert 100° Fahrenheit to Celsius using the formula:
          C = (F - 32) * (5/9)
          1. Create a variable `fahrenheit` with value 100
          2. Calculate the celsius equivalent
          3. Print the result rounded to 2 decimal places
        requirements:
          - "Use proper operator precedence"
          - "Use the round() function for rounding"
        input: "No input required"
        output: |
          37.78
        resource:
          name: "Operator Precedence"
          url: "https://docs.python.org/3/reference/expressions.html#operator-precedence"
        difficulty: "easy"
  - topic: Assignment Operators
    exercises:
      - id: py-ce-op-003
        title: "Counter Increment"
        task: |
          1. Initialize a variable `counter` with value 5
          2. Using augmented assignment operators:
            - Add 3 to counter
            - Multiply counter by 2
            - Subtract 4 from counter
            - Divide counter by 2
          3. Print the final value
        requirements:
          - "Must use augmented assignment operators (+=, *=, -=, /=)"
          - "Perform operations in the specified order"
        input: "No input required"
        output: |
          6.0
        difficulty: "easy"

  - topic: Comparison Operators
    exercises:
      - id: py-ce-op-004
        title: "Age Verification"
        task: |
          1. Create a variable `age` with your age
          2. Check and print whether:
            - You're 18 or older
            - Your age is between 13 and 19 (teenager)
            - Your age is exactly 21
        requirements:
          - "Use comparison operators (>, <, >=, <=, ==)"
          - "Use logical operators (and, or) where needed"
          - "Print results as booleans"
        input: "No input required"
        output: |
          True False False
        difficulty: "medium"

  - topic: Logical Operators
    exercises:
      - id: py-ce-op-005
        title: "Login System"
        task: |
          Create a simple login check:
          1. Set variables `username` to "admin" and `password` to "12345"
          2. Check if either:
            - Both username and password are correct, OR
            - A variable `remember_me` is True
          3. Print "Access granted" or "Access denied"
        requirements:
          - "Use logical operators (and, or, not)"
          - "Include all conditions in one if statement"
        input: "No input required"
        output: |
          Access granted
        difficulty: "medium"

  - topic: Bitwise Operators
    exercises:
      - id: py-ce-op-006
        title: "Flag Permissions"
        task: |
          Implement basic permission checks using bitwise operations:
          1. Define permissions as:
            - READ = 0b100
            - WRITE = 0b010
            - EXECUTE = 0b001
          2. Create user permission `user_flags = 0b110`
          3. Check and print which permissions the user has
        requirements:
          - "Use bitwise AND (&) operator for checks"
          - "Print permissions as 'Can read', 'Can write', 'Can execute'"
        input: "No input required"
        output: |
          Can read
          Can write
        difficulty: "hard"

      - id: py-ce-op-007
        title: "Expression Evaluation"
        task: |
          Evaluate the following expression correctly:
          5 + 3 * 2 ** 2 / 4 - 1
          1. Compute the result manually following operator precedence
          2. Verify by making Python compute it
          3. Print both your manual result and Python's result
        requirements:
          - "Show your manual calculation steps in comments"
          - "Use parentheses to force different evaluation order"
        input: "No input required"
        output: |
          Manual: 7.0
          Python: 7.0
        difficulty: "hard"

      - id: py-ce-var-001
        title: "Basic Variable Assignment"
        task: |
          1. Create a variable called `name` and assign your name to it
          2. Create a variable called `age` and assign your age to it
          3. Create a variable called `city` and assign your city to it
          4. Print all three variables
        requirements:
          - "Use proper variable naming conventions"
          - "Include all three variables in one print statement"
        input: "No input required"
        output: |
          John 30 New York
        resource:
          name: "Variable Basics"
          url: "https://www.w3schools.com/python/python_variables.asp"
        difficulty: "easy"

      - id: py-ce-var-002
        title: "Variable Reassignment"
        task: |
          1. Create variable `favorite_color` with initial color
          2. Print initial value
          3. Reassign new color
          4. Print new value
        requirements:
          - "Demonstrate variable reassignment"
          - "Show both before/after states"
        input: "No input required"
        output: |
          Blue
          Green
        resource:
          name: "Variable Reassignment"
          url: "https://realpython.com/python-variables/"
        difficulty: "easy"

      - id: py-ce-var-003
        title: "Variable Operations"
        task: |
          1. Create variables `a=5` and `b=10`
          2. Calculate sum, difference, and product
          3. Print all results
        requirements:
          - "Use separate variables for each operation"
          - "Print formatted output"
        input: "No input required"
        output: |
          Sum: 15
          Difference: -5
          Product: 50
        resource:
          name: "Python Operators"
          url: "https://www.programiz.com/python-programming/operators"
        difficulty: "easy"

      - id: py-ce-var-004
        title: "String Concatenation"
        task: |
          1. Create `first_name` and `last_name` variables
          2. Combine into `full_name` with space
          3. Print result
        requirements:
          - "Use string concatenation"
          - "Handle spacing properly"
        input: "No input required"
        output: |
          Alice Johnson
        example_solution: |
          first_name = "Alice"
          last_name = "Johnson"
          full_name = first_name + " " + last_name
          print(full_name)
        difficulty: "easy"

      - id: py-ce-var-005
        title: "Input and Variables"
        task: |
          1. Get user's name via input()
          2. Get user's age via input()
          3. Print greeting message
        requirements:
          - "Use descriptive input prompts"
          - "Format output string properly"
        input: |
          Enter your name: Alice
          Enter your age: 25
        output: |
          Hello Alice, you are 25 years old.
        example_solution: |
          user_name = input("Enter your name: ")
          user_age = input("Enter your age: ")
          print("Hello", user_name + ", you are", user_age, "years old.")
        difficulty: "easy"

      - id: py-ce-var-006
        title: "Circle Area Calculation"
        task: |
          1. Get radius from user
          2. Calculate area (πr²)
          3. Print result
        requirements:
          - "Use math.pi for π"
          - "Handle decimal inputs"
        input: |
          Enter radius: 5
        output: |
          Area: 78.53981633974483
        resource:
          name: "View Solution"
          url: "https://www.youtube.com/watch?v=QoECA8v_2tQ"
        difficulty: "medium"

      - id: py-ce-var-007
        title: "Variable Swapping"
        task: |
          1. Initialize two variables
          2. Swap values without third variable
          3. Print before/after
        requirements:
          - "Use tuple unpacking method"
          - "No temporary variables allowed"
        input: "No input required"
        output: |
          Before: x=5, y=10
          After: x=10, y=5
        resource:
          name: "View Solution"
          url: "https://youtu.be/CVy3A48WXeE"
        difficulty: "medium"

      - id: py-ce-var-008
        title: "Multiple Variable Assignment"
        task: |
          1. Assign multiple values to multiple variables
          2. Demonstrate both single-line and unpacking methods
        requirements:
          - "Show at least 3 variables"
          - "Include sequence unpacking example"
        input: "No input required"
        output: |
          Single-line: a=1, b=2, c=3
          Unpacking: x=10, y=20, z=30
        resource:
          name: "View Solution"
          url: "https://youtu.be/ur8rkDPzuSU"
        difficulty: "easy"

      - id: py-ce-wl-001
        title: "Age and Exercise Input Validation"
        task: |
          Create a program that:
          1. Validates age input (must be positive number)
          2. Gets user's name
          3. Validates exercise preference (only accepts Y/N)
          4. Prints all collected information
        requirements:
          - Use `while True` loops for input validation
          - "For age: reject non-numeric and non-positive values"
          - "For exercise preference: accept only Y or N (case insensitive)"
          - "Display formatted output with name and age"
          - "Handle all edge cases (empty input, wrong types, etc.)"
        input: |
          (Program should handle console input interactively)
          Example test sequence:
          Enter your age: abc
          Enter your age: -5
          Enter your age: 25
          Enter your name: Alice
          Do you like to exercise? (Y/N): maybe
          Do you like to exercise? (Y/N): N
        output: |
          Your name is Alice and you are 25 years old.

          Nice
        resource:
          name: "View Solution"
          url: "https://yasirbhutta.github.io/python/docs/loops-while/solutions/py-ce-wl-001.html"
        difficulty: "easy"

      - id: py-ce-001
        title: "Protected Attributes"
        task: |
          Create a `BankAccount` class with a protected `_balance` attribute.
          Implement methods to deposit and withdraw money with basic validation.
        requirements: |
          - Use single underscore convention for protected attribute
          - Prevent negative balance withdrawals
          - Include a method to display current balance
        input: |
          account = BankAccount(100)
          account.deposit(50)
          account.withdraw(30)
          account.display_balance()
        output: |
          Current balance: 120
        resource:
          name: "Protected Attributes Tutorial"
          url: "https://example.com/protected-attributes"
        difficulty: "easy"

      - id: py-ce-002
        title: "Private Attributes with Getters/Setters"
        task: |
          Create a `Person` class with private `__age` attribute.
          Implement proper getter and setter methods with age validation.
        requirements: |
          - Use double underscores for private attribute
          - Setter should reject ages < 0 or > 120
          - Getter should return age with "years" suffix
        input: |
          person = Person()
          person.set_age(25)
          print(person.get_age())
          person.set_age(150)
        output: |
          25 years
          Invalid age!
        resource:
          name: "Private Attributes Guide"
          url: "https://example.com/private-attributes"
        difficulty: "easy"

      - id: py-ce-003
        title: "Property Decorators"
        task: |
          Create a `Temperature` class that uses @property to control access to celsius value.
          Add validation to prevent temperatures below absolute zero (-273.15°C).
        requirements: |
          - Use @property for getter
          - Use @temperature.setter for setter
          - Raise ValueError for invalid temperatures
        input: |
          temp = Temperature()
          temp.celsius = 25
          print(temp.celsius)
          temp.celsius = -300
        output: |
          25
          ValueError: Temperature below absolute zero!
        resource:
          name: "Property Decorators Explained"
          url: "https://example.com/property-decorators"
        difficulty: "medium"

      - id: py-ce-004
        title: "Read-Only Property"
        task: |
          Create a `Circle` class with private `__radius` and read-only `area` property.
          The area should be calculated when accessed but not modifiable directly.
        requirements: |
          - Use private attribute for radius
          - Implement area as read-only property
          - Area calculation: πr² (use math.pi)
        input: |
          circle = Circle(5)
          print(circle.area)
          circle.area = 100
        output: |
          78.53981633974483
          AttributeError: can't set attribute
        resource:
          name: "Read-Only Properties"
          url: "https://example.com/readonly-properties"
        difficulty: "medium"

      - id: py-ce-005
        title: "Full Encapsulation Example"
        task: |
          Create a `Student` class that fully encapsulates student data:
          - Private name (validated to be non-empty)
          - Private grades list (with methods to add grades and calculate average)
        requirements: |
          - Use double underscore for private attributes
          - Implement proper getters/setters
          - Add method to calculate grade average
          - Prevent direct modification of grades list
        input: |
          student = Student("Alice")
          student.add_grade(90)
          student.add_grade(85)
          print(student.get_name())
          print(student.get_average())
        output: |
          Alice
          87.5
        resource:
          name: "Complete Encapsulation"
          url: "https://example.com/full-encapsulation"
        difficulty: "medium"

  - topic: oop-inheritance
    exercises:
      - id: py-ce-001
        title: "Basic Inheritance"
        task: |
          Create a `Vehicle` class with attributes like `brand` and `year`. Then, create a `Car` class that inherits from `Vehicle` and adds an additional attribute `model`.
        requirements: |
          - Define a method in the `Vehicle` class that prints basic vehicle details.
          - Override this method in the `Car` class to print additional details (e.g., model).
        input: |
          car = Car("Toyota", 2022, "Corolla")
          car.display_info()
        output: |
          Brand: Toyota, Year: 2022
          Model: Corolla
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-001"
        difficulty: "easy"

      - id: py-ce-002
        title: "Method Overriding"
        task: |
          Create a `Person` class with a method `greet()`. Then, create a `Student` class that inherits from `Person` and overrides the `greet()` method to display a custom greeting message.
        requirements: |
          - The `Person` class should have a `name` attribute.
          - The `Student` class should override the `greet()` method to say "Hello, I am [name], a student".
        input: |
          student = Student("Alice")
          student.greet()
        output: |
          Hello, I am Alice, a student.
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-002"
        difficulty: "easy"

      - id: py-ce-003
        title: "Using `super()` in Inheritance"
        task: |
          Create a `Shape` class with a method `area()` that returns `None`. Then, create a `Rectangle` class that inherits from `Shape` and calculates the area of the rectangle using the length and width. Use `super()` to call the `Shape` constructor.
        requirements: |
          - The `Rectangle` class should accept `length` and `width` as arguments.
          - The `area()` method in `Rectangle` should calculate and print the area of the rectangle.
        input: |
          rectangle = Rectangle(5, 3)
          print(f"Area of rectangle: {rectangle.area()}")
        output: |
          Area of rectangle: 15
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-003"
        difficulty: "easy"

      - id: py-ce-004
        title: "Multilevel Inheritance"
        task: |
          Create a class `Animal` with a method `sound()`. Then, create a `Dog` class that inherits from `Animal` and overrides the `sound()` method. Afterward, create a `Puppy` class that inherits from `Dog` and adds a new method `play()`.
        requirements: |
          - The `sound()` method should print a generic animal sound in the `Animal` class.
          - The `Puppy` class should print a playful message in the `play()` method.
        input: |
          puppy = Puppy()
          puppy.sound()  # Inherited from Dog
          puppy.play()   # Specific to Puppy
        output: |
          Bark!
          Puppy is playing!
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-004"
        difficulty: "easy"

      - id: py-ce-005
        title: "Hierarchical Inheritance"
        task: |
          Create a `Person` class with a method `info()` to display basic information. Then, create two classes `Employee` and `Student` that inherit from `Person` and override the `info()` method to show their specific details.
        requirements: |
          - The `Employee` class should display "Employee [name], [age], [position]".
          - The `Student` class should display "Student [name], [age], [major]".
        input: |
          emp = Employee("John", 30, "Software Engineer")
          emp.info()

          stu = Student("Jane", 20, "Computer Science")
          stu.info()
        output: |
          Employee John, Age: 30, Position: Software Engineer
          Student Jane, Age: 20, Major: Computer Science
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-005"
        difficulty: "easy"

      - id: py-ce-006
        title: "Dynamic Method Resolution Order (MRO)"
        task: |
          Create a `Bird` class, a `FlyingBird` class, and a `Penguin` class. The `Penguin` class should inherit from `Bird` and override the `fly()` method to indicate that penguins can't fly.
        requirements: |
          - Use the `super()` function to call methods from the `Bird` class, demonstrating method resolution order (MRO).
        input: |
          bird = Bird()
          bird.fly()

          flying_bird = FlyingBird()
          flying_bird.fly()

          penguin = Penguin()
          penguin.fly()
        output: |
          Bird is flying.
          Flying bird is soaring high.
          Penguins cannot fly.
        resource:
          name: "View Solution"
          url: "https://example.com/solution/py-ce-006"
        difficulty: "easy"

  - topic: strings
    exercises:
      - id: py-str-001
        title: "String Information"
        task: |
          Ask the user for their name and print:
          - The name in all uppercase
          - The name in all lowercase
          - The number of characters in the name
        requirements: |
          - Use `input()`, `upper()`, `lower()`, and `len()`
        input: |
          name = input("Enter your name: ")
        output: |
          Uppercase: JOHN
          Lowercase: john
          Length: 4
        difficulty: "easy"

      - id: py-str-002
        title: "Remove Extra Spaces"
        task: |
          Given a string with leading and trailing spaces, remove them and print the cleaned sentence.
        requirements: |
          - Use the `strip()` method.
        input: |
          sentence = "   Python is fun!   "
        output: |
          Cleaned Sentence: Python is fun!
        difficulty: "easy"

      - id: py-str-003
        title: "String Alignment"
        task: |
          Align the word "Code" within a 20-character width using different alignments.
        requirements: |
          - Use `center()`, `ljust()`, and `rjust()`
        input: |
          word = "Code"
        output: |
          Centered :        Code        
          Left     : Code               
          Right    :               Code
        difficulty: "easy"

      - id: py-str-004
        title: "String Slicing"
        task: |
          Perform slicing on the string "Python Programming":
          - Extract and print the first 6 characters
          - Extract and print the last 11 characters
          - Extract and print characters from index 7 to 17
        requirements: |
          - Use slicing syntax with `[]`
        input: |
          text = "Python Programming"
        output: |
          First 6 characters: Python
          Last 11 characters: Programming
          Characters 7 to 17: Programming
        difficulty: "easy"

      - id: py-str-005
        title: "String Formatting"
        task: |
          Given name and age variables, print: "My name is Alice and I am 30 years old."
        requirements: |
          - Use f-strings or `format()` for string formatting.
        input: |
          name = "Alice"
          age = 30
        output: |
          My name is Alice and I am 30 years old.
        difficulty: "easy"
  - topic: lambda
    exercises:
      - id: py-lf-001
        title: "Reverse a String"
        task: |
          Create a lambda function to reverse a string.
        input: |
          "hello"
        output: |
          "olleh"
        difficulty: "medium"

      - id: py-lf-002
        title: "Check Substring"
        task: |
          Create a lambda function that returns `True` if a substring exists in a string.
        input: |
          "world", "hello world"
        output: |
          True
        difficulty: "medium"

      - id: py-lf-003
        title: "Calculate Rectangle Area"
        task: |
          Create a lambda function to calculate the area of a rectangle.
        input: |
          4, 7
        output: |
          28
        difficulty: "easy"

      - id: py-lf-004
        title: "Square List Elements (with `map`)"
        task: |
          Use a lambda with `map` to square each element in a list.
        input: |
          [1, 2, 3, 4]
        output: |
          [1, 4, 9, 16]
        difficulty: "hard"

      - id: py-lf-005
        title: "Filter Even Numbers (with `filter`)"
        task: |
          Use a lambda with `filter` to extract even numbers from a list.
        input: |
          [1, 2, 3, 4, 5, 6]
        output: |
          [2, 4, 6]
        difficulty: "hard"

      - id: py-lf-006
        title: "Maximum of Two Numbers"
        task: |
          Create a lambda function to return the maximum of two numbers.
        input: |
          8, 12
        output: |
          12
        difficulty: "medium"

      - id: py-lf-007
        title: "Uppercase Conversion"
        task: |
          Create a lambda function to convert a string to uppercase.
        input: |
          "lambda"
        output: |
          "LAMBDA"
        difficulty: "medium"

      - id: py-lf-008
        title: "Combine Strings"
        task: |
          Create a lambda function to concatenate two strings with a space.
        input: |
          "Hello", "World"
        output: |
          "Hello World"
        difficulty: "easy"

      - id: py-lf-009
        title: "Check Palindrome"
        task: |
          Create a lambda function to check if a string is a palindrome.
        input: |
          "madam"
        output: |
          True
        difficulty: "medium"
